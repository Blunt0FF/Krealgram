const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');
const User = require('./models/userModel');
const Post = require('./models/postModel');
const drive = require('./config/googleDrive');

async function uploadFileToDrive(fileUrl) {
  try {
    console.log(`[MIGRATION] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${fileUrl}`);
    
    if (!fileUrl) {
      console.warn('[MIGRATION] –ü—É—Å—Ç–æ–π URL —Ñ–∞–π–ª–∞');
      return null;
    }

    const response = await fetch(fileUrl);
    
    if (!response.ok) {
      console.error(`[MIGRATION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
      return null;
    }

    const blob = await response.blob();
    const buffer = await blob.arrayBuffer();

    const fileMetadata = {
      name: path.basename(fileUrl),
      parents: [process.env.GOOGLE_DRIVE_FOLDER_ID]
    };

    const media = {
      mimeType: blob.type || 'application/octet-stream',
      body: Buffer.from(buffer)
    };

    const uploadedFile = await drive.drive.files.create({
      resource: fileMetadata,
      media: media,
      fields: 'id, webViewLink'
    });

    const newUrl = `https://drive.google.com/uc?id=${uploadedFile.data.id}`;
    console.log(`[MIGRATION] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${newUrl}`);
    
    return newUrl;
  } catch (error) {
    console.error('[MIGRATION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    return null;
  }
}

async function migrateCloudinaryToDriveOnRender() {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ Google Drive');

  try {
    const users = await User.find({});
    const posts = await Post.find({});

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤`);
    console.log(`üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    const migratedPosts = [];
    const migratedUsers = [];
    const failedMigrations = [];

    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    for (const post of posts) {
      try {
        if (post.image && !post.image.includes('drive.google.com')) {
          const newImageUrl = await uploadFileToDrive(post.image);
          if (newImageUrl) {
            post.image = newImageUrl;
            post.imageUrl = newImageUrl;
            await post.save();
            migratedPosts.push(post._id);
          } else {
            failedMigrations.push({ 
              type: 'post_image', 
              postId: post._id, 
              originalUrl: post.image 
            });
          }
        }

        if (post.thumbnailUrl && !post.thumbnailUrl.includes('drive.google.com')) {
          const newThumbnailUrl = await uploadFileToDrive(post.thumbnailUrl);
          if (newThumbnailUrl) {
            post.thumbnailUrl = newThumbnailUrl;
            await post.save();
          } else {
            failedMigrations.push({ 
              type: 'post_thumbnail', 
              postId: post._id, 
              originalUrl: post.thumbnailUrl 
            });
          }
        }
      } catch (postError) {
        console.error(`[MIGRATION] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ${post._id}:`, postError);
        failedMigrations.push({ 
          type: 'post', 
          postId: post._id, 
          error: postError.message 
        });
      }
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of users) {
      try {
        if (user.avatar && !user.avatar.includes('drive.google.com')) {
          const newAvatarUrl = await uploadFileToDrive(user.avatar);
          if (newAvatarUrl) {
            user.avatar = newAvatarUrl;
            await user.save();
            migratedUsers.push(user._id);
          } else {
            failedMigrations.push({ 
              type: 'user_avatar', 
              userId: user._id, 
              originalUrl: user.avatar 
            });
          }
        }
      } catch (userError) {
        console.error(`[MIGRATION] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user._id}:`, userError);
        failedMigrations.push({ 
          type: 'user', 
          userId: user._id, 
          error: userError.message 
        });
      }
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    return { 
      success: true, 
      migratedPosts: migratedPosts.length, 
      migratedUsers: migratedUsers.length,
      failedMigrations,
      details: {
        postIds: migratedPosts,
        userIds: migratedUsers
      }
    };
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw new Error(`–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
  }
}

module.exports = { migrateCloudinaryToDriveOnRender }; 