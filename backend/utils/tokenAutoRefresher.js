const { google } = require('googleapis');
const fs = require('fs').promises;
const path = require('path');

class TokenAutoRefresher {
  constructor() {
    this.isRunning = false;
    this.checkInterval = null;
    this.lastCheck = null;
    this.oauth2Client = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OAuth2 –∫–ª–∏–µ–Ω—Ç–∞
   */
  initialize() {
    this.oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      'http://localhost'
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π refresh token
    this.oauth2Client.setCredentials({
      refresh_token: process.env.GOOGLE_DRIVE_REFRESH_TOKEN
    });

    console.log('[TOKEN_REFRESHER] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  async checkTokenValidity() {
    try {
      const drive = google.drive({ version: 'v3', auth: this.oauth2Client });
      await drive.about.get({ fields: 'user' });
      console.log('[TOKEN_REFRESHER] ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      return true;
    } catch (error) {
      console.log('[TOKEN_REFRESHER] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:', error.message);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
   */
  async refreshToken() {
    try {
      console.log('[TOKEN_REFRESHER] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
      
      const { credentials } = await this.oauth2Client.refreshAccessToken();
      
      if (credentials.access_token) {
        console.log('[TOKEN_REFRESHER] ‚úÖ –ù–æ–≤—ã–π access token –ø–æ–ª—É—á–µ–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        process.env.GOOGLE_DRIVE_ACCESS_TOKEN = credentials.access_token;
        
        if (credentials.refresh_token) {
          process.env.GOOGLE_DRIVE_REFRESH_TOKEN = credentials.refresh_token;
          console.log('[TOKEN_REFRESHER] ‚úÖ –ù–æ–≤—ã–π refresh token –ø–æ–ª—É—á–µ–Ω');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è Render
          await this.saveTokenToFile(credentials.refresh_token);
        }
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('[TOKEN_REFRESHER] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª –¥–ª—è Render
   */
  async saveTokenToFile(refreshToken) {
    try {
      const tokenData = {
        refresh_token: refreshToken,
        updated_at: new Date().toISOString()
      };
      
      await fs.writeFile(
        path.join(__dirname, '../token-backup.json'),
        JSON.stringify(tokenData, null, 2)
      );
      
      console.log('[TOKEN_REFRESHER] üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª');
    } catch (error) {
      console.error('[TOKEN_REFRESHER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadTokenFromFile() {
    try {
      const tokenPath = path.join(__dirname, '../token-backup.json');
      const tokenData = await fs.readFile(tokenPath, 'utf8');
      const { refresh_token } = JSON.parse(tokenData);
      
      if (refresh_token) {
        process.env.GOOGLE_DRIVE_REFRESH_TOKEN = refresh_token;
        this.oauth2Client.setCredentials({ refresh_token });
        console.log('[TOKEN_REFRESHER] üìÇ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');
        return true;
      }
      
      return false;
    } catch (error) {
      console.log('[TOKEN_REFRESHER] üìÇ –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
   */
  startAutoRefresh(intervalMinutes = 60) {
    if (this.isRunning) {
      console.log('[TOKEN_REFRESHER] ‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
      return;
    }

    this.isRunning = true;
    const intervalMs = intervalMinutes * 60 * 1000;

    console.log(`[TOKEN_REFRESHER] üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç`);

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(async () => {
      await this.performTokenCheck();
    }, 10 * 60 * 1000);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.checkInterval = setInterval(async () => {
      await this.performTokenCheck();
    }, intervalMs);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  async performTokenCheck() {
    try {
      console.log('[TOKEN_REFRESHER] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Google Drive –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      const googleDrive = require('../config/googleDrive');
      if (!googleDrive.isInitialized) {
        console.log('[TOKEN_REFRESHER] ‚ö†Ô∏è Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return;
      }
      
      const isValid = await this.checkTokenValidity();
      
      if (!isValid) {
        console.log('[TOKEN_REFRESHER] üîÑ –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        const success = await this.refreshToken();
        
        if (success) {
          console.log('[TOKEN_REFRESHER] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
          console.log('[TOKEN_REFRESHER] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
        }
      }
      
      this.lastCheck = new Date();
    } catch (error) {
      console.error('[TOKEN_REFRESHER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
   */
  stopAutoRefresh() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
    this.isRunning = false;
    console.log('[TOKEN_REFRESHER] üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastCheck: this.lastCheck,
      checkInterval: this.checkInterval ? 'active' : 'inactive'
    };
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OAuth2 –∫–ª–∏–µ–Ω—Ç
   */
  getOAuth2Client() {
    return this.oauth2Client;
  }
}

module.exports = new TokenAutoRefresher(); 