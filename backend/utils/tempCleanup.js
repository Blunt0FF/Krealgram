const fs = require('fs');
const path = require('path');

const TEMP_ROOT_PATH = path.join(__dirname, '../temp');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getDirectorySize(dirPath) {
  let totalSize = 0;
  let fileCount = 0;
  
  try {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      const stats = fs.statSync(itemPath);
      
      if (stats.isDirectory()) {
        const subDirSize = getDirectorySize(itemPath);
        totalSize += subDirSize.size;
        fileCount += subDirSize.count;
      } else {
        totalSize += stats.size;
        fileCount++;
      }
    }
  } catch (error) {
    console.log(`[TEMP_CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ ${dirPath}:`, error.message);
  }
  
  return { size: totalSize, count: fileCount };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ temp –ø–∞–ø–æ–∫
function cleanupTempFolders() {
  try {
    const tempDirs = ['input', 'output', 'preview'];
    
    for (const dirName of tempDirs) {
      const dirPath = path.join(TEMP_ROOT_PATH, dirName);
      
      if (!fs.existsSync(dirPath)) {
        continue;
      }
      
      const files = fs.readdirSync(dirPath);
      let deletedCount = 0;
      
      for (const file of files) {
        const filePath = path.join(dirPath, file);
        
        try {
          const stats = fs.statSync(filePath);
          const fileAge = Date.now() - stats.mtime.getTime();
          
          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 30 —Å–µ–∫—É–Ω–¥)
          if (fileAge > 5 * 60 * 1000) {
            if (stats.isDirectory()) {
              fs.rmSync(filePath, { recursive: true, force: true });
            } else {
              fs.unlinkSync(filePath);
            }
            deletedCount++;
          }
        } catch (error) {
          console.log(`[TEMP_CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
        }
      }
      
      if (deletedCount > 0) {
        console.log(`[TEMP_CLEANUP] –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–∞–π–ª–æ–≤ –∏–∑ ${dirName}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä temp –ø–∞–ø–∫–∏
    const totalSize = getDirectorySize(TEMP_ROOT_PATH);
    const totalSizeMB = Math.round(totalSize.size / (1024 * 1024));
    
    if (totalSizeMB > 100) {
      console.log(`[TEMP_CLEANUP] ‚ö†Ô∏è Temp –ø–∞–ø–∫–∞ –±–æ–ª—å—à–∞—è: ${totalSizeMB}MB (${totalSize.count} —Ñ–∞–π–ª–æ–≤)`);
    }
    
  } catch (error) {
    console.log('[TEMP_CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π)
function forceCleanupAfterOperation() {
  console.log('[TEMP_CLEANUP] üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
  
  try {
    const tempDirs = ['input', 'output', 'preview'];
    
    for (const dirName of tempDirs) {
      const dirPath = path.join(TEMP_ROOT_PATH, dirName);
      
      if (!fs.existsSync(dirPath)) {
        continue;
      }
      
      const files = fs.readdirSync(dirPath);
      let deletedCount = 0;
      
      for (const file of files) {
        const filePath = path.join(dirPath, file);
        
        try {
          const stats = fs.statSync(filePath);
          const fileAge = Date.now() - stats.mtime.getTime();
          
          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          if (fileAge > 1 * 60 * 1000) {
            if (stats.isDirectory()) {
              fs.rmSync(filePath, { recursive: true, force: true });
            } else {
              fs.unlinkSync(filePath);
            }
            deletedCount++;
          }
        } catch (error) {
          console.log(`[TEMP_CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ ${filePath}:`, error.message);
        }
      }
      
      if (deletedCount > 0) {
        console.log(`[TEMP_CLEANUP] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–∞–π–ª–æ–≤ –∏–∑ ${dirName}`);
      }
    }
    
    const totalSize = getDirectorySize(TEMP_ROOT_PATH);
    const totalSizeMB = Math.round(totalSize.size / (1024 * 1024));
    console.log(`[TEMP_CLEANUP] ‚úÖ Temp –ø–∞–ø–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${totalSizeMB}MB (${totalSize.count} —Ñ–∞–π–ª–æ–≤)`);
    
  } catch (error) {
    console.log('[TEMP_CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ:', error.message);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  cleanupTempFolders,
  forceCleanupAfterOperation,
  getDirectorySize
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
console.log('[TEMP_CLEANUP] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—á–∏—Å—Ç–∫–∞ –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
cleanupTempFolders(); // –ü–µ—Ä–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ 