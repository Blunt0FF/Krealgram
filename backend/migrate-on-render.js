// –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —Å–∞–º–æ–º Render —Å–µ—Ä–≤–µ—Ä–µ
// –î–æ–±–∞–≤—å endpoint –≤ routes –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏

const mongoose = require('mongoose');
const axios = require('axios');
const path = require('path');
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Post = require('./models/postModel');
const User = require('./models/userModel');
const Conversation = require('./models/conversationModel');

// –ò–º–ø–æ—Ä—Ç Google Drive
const GoogleDriveManager = require('./config/googleDriveOAuth');

const migrateCloudinaryToDriveOnRender = async () => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å Cloudinary –Ω–∞ Google Drive –Ω–∞ Render...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Drive
    const googleDrive = new GoogleDriveManager();
    await googleDrive.initialize();
    console.log('‚úÖ Google Drive –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    console.log('üì∏ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤...');
    const posts = await Post.find({
      $or: [
        { image: { $regex: 'cloudinary.com' } },
        { thumbnailUrl: { $regex: 'cloudinary.com' } },
        { gifPreview: { $regex: 'cloudinary.com' } }
      ]
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    let postsUpdated = 0;
    for (const post of posts) {
      let updated = false;
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (post.image && post.image.includes('cloudinary.com')) {
        try {
          console.log(`–ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ${post._id}...`);
          const newUrl = await downloadAndUploadToDrive(post.image, googleDrive, tempDir, `post_${post._id}_image`);
          post.image = newUrl;
          updated = true;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞: ${newUrl}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${post._id}:`, error.message);
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é (thumbnailUrl)
      if (post.thumbnailUrl && post.thumbnailUrl.includes('cloudinary.com')) {
        try {
          console.log(`–ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ ${post._id}...`);
          const newUrl = await downloadAndUploadToDrive(post.thumbnailUrl, googleDrive, tempDir, `post_${post._id}_thumbnail`);
          post.thumbnailUrl = newUrl;
          updated = true;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞: ${newUrl}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ ${post._id}:`, error.message);
        }
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º GIF –ø—Ä–µ–≤—å—é
      if (post.gifPreview && post.gifPreview.includes('cloudinary.com')) {
        try {
          console.log(`–ú–∏–≥—Ä–∏—Ä—É–µ–º GIF –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ ${post._id}...`);
          const newUrl = await downloadAndUploadToDrive(post.gifPreview, googleDrive, tempDir, `post_${post._id}_gif`);
          post.gifPreview = newUrl;
          updated = true;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ GIF –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞: ${newUrl}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ GIF –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ ${post._id}:`, error.message);
        }
      }
      
      if (updated) {
        await post.save();
        postsUpdated++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å—Ç ${post._id}`);
      }
    }
    
    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë§ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await User.find({
      avatar: { $regex: 'cloudinary.com' }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    let usersUpdated = 0;
    for (const user of users) {
      if (user.avatar && user.avatar.includes('cloudinary.com')) {
        try {
          console.log(`–ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}...`);
          const newUrl = await downloadAndUploadToDrive(user.avatar, googleDrive, tempDir, `avatar_${user._id}`);
          user.avatar = newUrl;
          await user.save();
          usersUpdated++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}: ${newUrl}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error.message);
        }
      }
    }
    
    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    console.log('üí¨ –ú–∏–≥—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...');
    const conversations = await Conversation.find({
      'messages.media.url': { $regex: 'cloudinary.com' }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${conversations.length} –±–µ—Å–µ–¥ —Å –º–µ–¥–∏–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    let conversationsUpdated = 0;
    for (const conversation of conversations) {
      let updated = false;
      
      for (const message of conversation.messages) {
        if (message.media && message.media.url && message.media.url.includes('cloudinary.com')) {
          try {
            console.log(`–ú–∏–≥—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...`);
            const newUrl = await downloadAndUploadToDrive(message.media.url, googleDrive, tempDir, `message_${message._id}`);
            message.media.url = newUrl;
            updated = true;
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${newUrl}`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error.message);
          }
        }
      }
      
      if (updated) {
        await conversation.save();
        conversationsUpdated++;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    const result = {
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
      stats: {
        postsUpdated,
        usersUpdated,
        conversationsUpdated,
        totalFiles: postsUpdated + usersUpdated + conversationsUpdated
      }
    };
    
    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –ü–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${postsUpdated}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${usersUpdated}`);
    console.log(`   - –ë–µ—Å–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${conversationsUpdated}`);
    console.log(`\nüí° –í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Google Drive`);
    
    return result;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å Cloudinary –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive
async function downloadAndUploadToDrive(cloudinaryUrl, googleDrive, tempDir, filename) {
  const tempFilePath = path.join(tempDir, `${filename}_${Date.now()}`);
  
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Cloudinary
    console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª: ${cloudinaryUrl}`);
    const response = await axios({
      method: 'GET',
      url: cloudinaryUrl,
      responseType: 'stream'
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const writer = fs.createWriteStream(tempFilePath);
    response.data.pipe(writer);
    
    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ buffer
    const fileBuffer = fs.readFileSync(tempFilePath);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
    const ext = path.extname(cloudinaryUrl.split('?')[0]).toLowerCase();
    let mimeType = 'application/octet-stream';
    
    switch (ext) {
      case '.jpg':
      case '.jpeg':
        mimeType = 'image/jpeg';
        break;
      case '.png':
        mimeType = 'image/png';
        break;
      case '.gif':
        mimeType = 'image/gif';
        break;
      case '.webp':
        mimeType = 'image/webp';
        break;
      case '.mp4':
        mimeType = 'video/mp4';
        break;
      case '.mov':
        mimeType = 'video/quicktime';
        break;
      case '.avi':
        mimeType = 'video/x-msvideo';
        break;
      default:
        mimeType = 'application/octet-stream';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
    const result = await googleDrive.uploadFile(fileBuffer, `${filename}${ext}`, mimeType);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempFilePath);
    
    return result.secure_url;
    
  } catch (error) {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (fs.existsSync(tempFilePath)) {
      fs.unlinkSync(tempFilePath);
    }
    throw error;
  }
}

module.exports = {
  migrateCloudinaryToDriveOnRender
}; 