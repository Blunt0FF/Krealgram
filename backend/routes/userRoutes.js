const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const authMiddleware = require('../middlewares/authMiddleware');
const { optionalAuth } = require('../middlewares/authMiddleware');
const { upload, uploadToGoogleDrive } = require('../middlewares/uploadMiddleware');

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ GET /api/users/profile/:identifier, –∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å ID/username)
// @route   GET /api/users/me
// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç authController.getCurrentUser)
// @access  Private 
// router.get('/me', authMiddleware, authController.getCurrentUser); // –≠—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ authRoutes

// @route   GET /api/users/search
// @desc    –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// @access  Private
const searchController = require('../controllers/searchController');
router.get('/search', authMiddleware, searchController.searchUsers);

// @route   GET /api/users/profile/:identifier
// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
// @access  Public (authMiddleware –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, isFollowedByCurrentUser)
router.get('/profile/:identifier', optionalAuth, userController.getUserProfile);

// @route   PUT /api/users/profile
// @desc    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (bio –∏ –∞–≤–∞—Ç–∞—Ä)
// @access  Private
router.put('/profile', authMiddleware, upload.single('avatar'), uploadToGoogleDrive, userController.updateUserProfile);

// @route   PUT /api/users/profile/avatar
// @desc    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π base64 –∏ —Å–∂–∞—Ç–∏–µ–º)
// @access  Private
router.put('/profile/avatar', authMiddleware, upload.single('avatar'), uploadToGoogleDrive, userController.updateUserAvatar);

// @route   POST /api/users/:userIdToFollow/follow
// @desc    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @access  Private
router.post('/:userIdToFollow/follow', authMiddleware, userController.toggleFollowUser);

// @route   DELETE /api/users/:userIdToFollow/follow  
// @desc    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @access  Private
router.delete('/:userIdToFollow/follow', authMiddleware, userController.toggleFollowUser);

// @route   GET /api/users/:userId/followers
// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @access  Public (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å authMiddleware –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∏—Ö –≤–∞–∂–Ω–∞)
router.get('/:userId/followers', userController.getFollowersList);

// @route   GET /api/users/:userId/following
// @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @access  Public
router.get('/:userId/following', userController.getFollowingList);

// @route   DELETE /api/users/:userId/followers/:followerId
// @desc    –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Ñ–∏–ª—è)
// @access  Private
router.delete('/:userId/followers/:followerId', authMiddleware, userController.removeFollower);

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/test/:username', async (req, res) => {
  try {
    const { username } = req.params;
    console.log(`üß™ Testing user existence: ${username}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const exactMatch = await require('../models/userModel').findOne({ username });
    console.log(`üß™ Exact match:`, exactMatch ? exactMatch.username : 'NOT FOUND');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º case-insensitive –ø–æ–∏—Å–∫
    const caseInsensitiveMatch = await require('../models/userModel').findOne({ 
      username: { $regex: new RegExp(`^${username}$`, 'i') } 
    });
    console.log(`üß™ Case-insensitive match:`, caseInsensitiveMatch ? caseInsensitiveMatch.username : 'NOT FOUND');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const partialMatch = await require('../models/userModel').findOne({ 
      username: { $regex: new RegExp(username, 'i') } 
    });
    console.log(`üß™ Partial match:`, partialMatch ? partialMatch.username : 'NOT FOUND');
    
    res.json({
      username,
      exactMatch: !!exactMatch,
      caseInsensitiveMatch: !!caseInsensitiveMatch,
      partialMatch: !!partialMatch,
      exactMatchUser: exactMatch ? { username: exactMatch.username, _id: exactMatch._id } : null,
      caseInsensitiveMatchUser: caseInsensitiveMatch ? { username: caseInsensitiveMatch.username, _id: caseInsensitiveMatch._id } : null,
      partialMatchUser: partialMatch ? { username: partialMatch.username, _id: partialMatch._id } : null
    });
  } catch (error) {
    console.error('Test route error:', error);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router; 