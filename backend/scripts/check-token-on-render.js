#!/usr/bin/env node

const { google } = require('googleapis');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Drive —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Render
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
 */

async function checkAndRefreshToken() {
  console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Drive —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Render...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º OAuth2 –∫–ª–∏–µ–Ω—Ç
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      'http://localhost'
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π refresh token
    oauth2Client.setCredentials({
      refresh_token: process.env.GOOGLE_DRIVE_REFRESH_TOKEN
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    
    try {
      await drive.about.get({ fields: 'user' });
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return true;
    } catch (error) {
      if (error.message.includes('invalid_grant')) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        const { credentials } = await oauth2Client.refreshAccessToken();
        
        if (credentials.access_token) {
          console.log('‚úÖ –ù–æ–≤—ã–π access token –ø–æ–ª—É—á–µ–Ω');
          
          if (credentials.refresh_token) {
            console.log('‚úÖ –ù–æ–≤—ã–π refresh token –ø–æ–ª—É—á–µ–Ω');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
            const tokenData = {
              refresh_token: credentials.refresh_token,
              access_token: credentials.access_token,
              updated_at: new Date().toISOString()
            };
            
            await fs.writeFile(
              path.join(__dirname, '../token-backup.json'),
              JSON.stringify(tokenData, null, 2)
            );
            
            console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª token-backup.json');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            process.env.GOOGLE_DRIVE_ACCESS_TOKEN = credentials.access_token;
            process.env.GOOGLE_DRIVE_REFRESH_TOKEN = credentials.refresh_token;
            
            console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
            return true;
          }
        }
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥
function logNotification(message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  logNotification('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Render');
  
  const success = await checkAndRefreshToken();
  
  if (success) {
    logNotification('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } else {
    logNotification('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { checkAndRefreshToken }; 