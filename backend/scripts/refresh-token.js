const { google } = require('googleapis');
require('dotenv').config();

async function refreshGoogleDriveToken() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Drive —Ç–æ–∫–µ–Ω–∞...');
    
    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      'urn:ietf:wg:oauth:2.0:oob'
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π refresh token
    const refreshToken = process.env.GOOGLE_REFRESH_TOKEN || process.env.GOOGLE_DRIVE_REFRESH_TOKEN;
    
    if (!refreshToken) {
      throw new Error('Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    oauth2Client.setCredentials({
      refresh_token: refreshToken
    });

    console.log('üì° –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ access token...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π access token
    const { credentials } = await oauth2Client.refreshAccessToken();
    
    console.log('‚úÖ –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:');
    console.log('Access Token:', credentials.access_token);
    console.log('Refresh Token:', credentials.refresh_token || '–ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
    
    if (credentials.expiry_date) {
      const expiryDate = new Date(credentials.expiry_date);
      console.log('Expiry Date:', expiryDate.toLocaleString());
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (credentials.access_token) {
      console.log('\nüìù –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.log('GOOGLE_DRIVE_ACCESS_TOKEN=' + credentials.access_token);
      if (credentials.refresh_token) {
        console.log('GOOGLE_REFRESH_TOKEN=' + credentials.refresh_token);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Drive
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive...');
    const drive = google.drive({ version: 'v3', auth: oauth2Client });
    const aboutResponse = await drive.about.get({ fields: 'user' });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', aboutResponse.data.user.emailAddress);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
    if (credentials.refresh_token) {
      const fs = require('fs').promises;
      const tokenPath = require('path').join(__dirname, '..', 'temp', 'google_refresh_token.txt');
      await fs.mkdir(require('path').dirname(tokenPath), { recursive: true });
      await fs.writeFile(tokenPath, credentials.refresh_token, 'utf8');
      console.log('üíæ –ù–æ–≤—ã–π refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:', tokenPath);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    
    if (error.message.includes('invalid_grant')) {
      console.log('\nüí° –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π refresh token:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run get-new-token');
      console.log('2. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Cloud Console');
      console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π OAuth 2.0 Client ID');
      console.log('4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π refresh token —á–µ—Ä–µ–∑ OAuth flow');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  refreshGoogleDriveToken();
}

module.exports = refreshGoogleDriveToken; 