const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
async function testVideoUpload() {
  console.log('üé¨ Testing video upload functionality...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1. Checking server health...');
    const healthResponse = await axios.get('http://localhost:3000/api/health');
    console.log('‚úÖ Server is running:', healthResponse.data);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudinary –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('2. Checking Cloudinary config...');
    console.log('USE_CLOUDINARY:', process.env.USE_CLOUDINARY);
    console.log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? 'Set' : 'Not set');
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–º–∏–Ω–∏ MP4)
    console.log('3. Creating test video file...');
    const testVideoPath = path.join(__dirname, 'temp', 'test-video.mp4');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π MP4 —Ñ–∞–π–ª (base64)
    const testVideoBase64 = 'AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAAAi5tZGF0AAACKg==';
    fs.writeFileSync(testVideoPath, Buffer.from(testVideoBase64, 'base64'));
    console.log('‚úÖ Test video created:', testVideoPath);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
    const stats = fs.statSync(testVideoPath);
    console.log('üìÑ File size:', stats.size, 'bytes');
    
    console.log('üéØ Video upload test completed. You can now test with real video files through the frontend.');
    
    // Cleanup
    fs.unlinkSync(testVideoPath);
    console.log('üßπ Cleanup completed.');
    
  } catch (error) {
    console.error('‚ùå Error during video upload test:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVideoUpload(); 