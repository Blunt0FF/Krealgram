require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const path = require('path');
const http = require('http');
const { Server } = require('socket.io');
const bodyParser = require('body-parser');
const connectDB = require('./config/db');
const { startUserStatusUpdater } = require('./utils/userStatusUpdater');
const { resetAllUsersToOffline } = require('./utils/resetUserStatuses');
const tokenAutoRefresher = require('./utils/tokenAutoRefresher');
require('./utils/tempCleanup'); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ temp –ø–∞–ø–æ–∫

// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

const logLevel = process.env.NODE_ENV === 'production' ? 'error' : 'info';

console.log('[SERVER] üöÄ Starting Krealgram backend...');

connectDB();

const googleDrive = require('./config/googleDrive');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Drive
googleDrive.initialize().then(() => {
  console.log('[SERVER] ‚úÖ Google Drive initialization completed');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  setTimeout(() => {
    if (googleDrive.isInitialized) {
      console.log('[SERVER] üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
      tokenAutoRefresher.initialize();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      tokenAutoRefresher.loadTokenFromFile().then(() => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        tokenAutoRefresher.startAutoRefresh(30);
      });
    }
  }, 10000);
  
}).catch((error) => {
  console.error('[SERVER] ‚ùå Google Drive initialization failed:', error.message);
  console.log('[SERVER] ‚ö†Ô∏è Server will continue without Google Drive');
});

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: [
      "http://localhost:4000",
      "http://127.0.0.1:4000",
      "https://krealgram.vercel.app",
      "https://krealgram.com",
      "https://www.krealgram.com",
      "https://krealgram-backend.onrender.com"
    ],
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    credentials: true
  }
});

app.set('io', io);

const whitelist = [
  "http://localhost:4000",
  "http://127.0.0.1:4000",
  "http://localhost:3000",
  "http://127.0.0.1:3000",
  "https://krealgram.vercel.app",
  "http://krealgram.vercel.app",
  "https://krealgram.com",
  "http://krealgram.com",
  "https://www.krealgram.com",
  "http://www.krealgram.com",
  "https://krealgram-backend.onrender.com",
  "krealgram.vercel.app",
  "krealgram.com",
  "www.krealgram.com"
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
const corsOptions = {
  origin: [
    'http://localhost:4000', 
    'https://localhost:4000', 
    'https://krealgram.com',
    'https://www.krealgram.com',
    'https://krealgram-backend.onrender.com',
    /\.krealgram\.com$/  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));

app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.get('/', (req, res) => {
  res.send('Krealgram API is working!');
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
app.get('/api/token-status', (req, res) => {
  const status = tokenAutoRefresher.getStatus();
  res.json({
    success: true,
    data: status
  });
});

// API –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
app.post('/api/refresh-token', async (req, res) => {
  try {
    const success = await tokenAutoRefresher.refreshToken();
    res.json({
      success,
      message: success ? '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// –†–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google OAuth callback
app.get('/auth/google/callback', (req, res) => {
  const { code } = req.query;
  
  if (code) {
    res.send(`
      <html>
        <head><title>Google Drive Authorization</title></head>
        <body>
          <h2>‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω!</h2>
          <p>–ö–æ–¥: <code>${code}</code></p>
          <p>–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:</p>
          <pre>node simple-token.js "${code}"</pre>
        </body>
      </html>
    `);
  } else {
    res.send(`
      <html>
        <head><title>Google Drive Authorization</title></head>
        <body>
          <h2>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
          <p>–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω.</p>
        </body>
      </html>
    `);
  }
});

const authRoutes = require('./routes/authRoutes');
const postRoutes = require('./routes/postRoutes');
const userRoutes = require('./routes/userRoutes');
const commentRoutes = require('./routes/commentRoutes');
const searchRoutes = require('./routes/searchRoutes');
const likeRoutes = require('./routes/likeRoutes');
const conversationRoutes = require('./routes/conversationRoutes');
const notificationRoutes = require('./routes/notificationRoutes');
const adminRoutes = require('./routes/adminRoutes');

app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/users', userRoutes);
app.use('/api/comments', commentRoutes);
app.use('/api/search', searchRoutes);
app.use('/api/likes', likeRoutes);
app.use('/api/conversations', conversationRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/admin', adminRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Å–∏
app.options('/api/proxy-drive/:id', (req, res) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, HEAD, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Range, Content-Range, Accept-Ranges');
  res.header('Access-Control-Expose-Headers', 'Content-Range, Accept-Ranges, Content-Length');
  res.sendStatus(200);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ HEAD –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
app.head('/api/proxy-drive/:id', async (req, res) => {
  const fileId = req.params.id;
  const drive = require('./config/googleDrive');
  
  try {
    if (!drive.isInitialized) {
      return res.status(500).send();
    }

    const meta = await drive.drive.files.get({
      fileId,
      fields: 'name, mimeType, size'
    });
    const mimeType = meta.data.mimeType || 'application/octet-stream';
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    let fileName = meta.data.name || 'file';
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      if (fileName.includes('√ê')) {
        fileName = decodeURIComponent(escape(fileName));
      }
    } catch (e) {
      console.log(`[PROXY-DRIVE] –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è ${fileId}:`, e.message);
    }
    
    const fileSize = meta.data.size || 0;
    
    res.set('Content-Type', meta.data.mimeType || 'application/octet-stream');
    res.set('Content-Length', meta.data.size || 0);
    res.set('Accept-Ranges', 'bytes');
    res.set('Cache-Control', 'public, max-age=31536000');
    res.send();
  } catch (err) {
    res.status(404).send();
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ
app.get('/api/test-video/:fileId', async (req, res) => {
  const fileId = req.params.fileId;
  const drive = require('./config/googleDrive');
  
  try {
    console.log(`[TEST-VIDEO] –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª ${fileId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const meta = await drive.drive.files.get({
      fileId,
      fields: 'name, mimeType, size'
    });
    
    console.log(`[TEST-VIDEO] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, meta.data);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 1024 –±–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testBuffer = await drive.drive.files.get({
      fileId,
      alt: 'media'
    }, { 
      responseType: 'arraybuffer',
      headers: {
        'Range': 'bytes=0-1023'
      }
    });
    
    console.log(`[TEST-VIDEO] –ü–µ—Ä–≤—ã–µ 1024 –±–∞–π—Ç–∞:`, testBuffer.data.byteLength);
    console.log(`[TEST-VIDEO] –ü–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç:`, Buffer.from(testBuffer.data.slice(0, 16)).toString('hex'));
    
    res.json({
      success: true,
      metadata: meta.data,
      testBytes: testBuffer.data.byteLength,
      firstBytes: Buffer.from(testBuffer.data.slice(0, 16)).toString('hex')
    });
  } catch (error) {
    console.error(`[TEST-VIDEO] –û—à–∏–±–∫–∞:`, error.message);
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/proxy-drive/:id', async (req, res) => {
  const fileId = req.params.id;
  const { type } = req.query;
  const { google } = require('googleapis');
  const drive = require('./config/googleDrive');
  const axios = require('axios');

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`[PROXY-DRIVE] üîç –ó–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
    console.log(`[PROXY-DRIVE] üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, {
      'range': req.headers.range,
      'accept': req.headers.accept,
      'user-agent': req.headers['user-agent']?.substring(0, 50) + '...'
    });
    console.log(`[PROXY-DRIVE] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${fileId}${type ? ` (type: ${type})` : ''}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ thumbnail –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    if (type === 'thumbnail') {
      console.log(`[PROXY-DRIVE] üîç –ò—â–µ–º thumbnail –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ ${fileId}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const mainFileMeta = await drive.drive.files.get({
          fileId,
          fields: 'name'
        });
        
        const mainFileName = mainFileMeta.data.name;
        console.log(`[PROXY-DRIVE] –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: ${mainFileName}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (avatar_username.ext)
        const usernameMatch = mainFileName.match(/^avatar_(.+)\./);
        if (usernameMatch) {
          const username = usernameMatch[1];
          const safeUsername = username.replace(/[^a-zA-Z0-9]/g, '_');
          
          // –ò—â–µ–º thumbnail —Ñ–∞–π–ª—ã (–≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
          const possibleThumbnailNames = [
            `thumb_${safeUsername}.jpeg`,
            `thumb_${safeUsername}.jpg`,
            `thumb_${safeUsername}.png`,
            `thumb_${safeUsername}.webp` // –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
          ];
          
          console.log(`[PROXY-DRIVE] –ò—â–µ–º thumbnail —Ñ–∞–π–ª—ã:`, possibleThumbnailNames);
          
          for (const thumbnailName of possibleThumbnailNames) {
            try {
              const searchResult = await drive.drive.files.list({
                q: `name='${thumbnailName}' and '${process.env.GOOGLE_DRIVE_AVATARS_FOLDER_ID}' in parents and trashed=false`,
                fields: 'files(id, name, createdTime, modifiedTime)',
                pageSize: 10,
                orderBy: 'modifiedTime desc'
              });
              
              if (searchResult.data.files && searchResult.data.files.length > 0) {
                console.log(`[PROXY-DRIVE] –ù–∞–π–¥–µ–Ω–æ ${searchResult.data.files.length} —Ñ–∞–π–ª–æ–≤ —Å –∏–º–µ–Ω–µ–º ${thumbnailName}:`);
                searchResult.data.files.forEach((file, index) => {
                  console.log(`[PROXY-DRIVE] ${index + 1}. ${file.name} (${file.id}) - —Å–æ–∑–¥–∞–Ω: ${file.createdTime}, –∏–∑–º–µ–Ω–µ–Ω: ${file.modifiedTime}`);
                });
                
                // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                const thumbnailFile = searchResult.data.files[0];
                console.log(`[PROXY-DRIVE] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π thumbnail: ${thumbnailFile.name} (${thumbnailFile.id})`);
                
                // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º thumbnail —Ñ–∞–π–ª
                const thumbnailRes = await drive.drive.files.get({
                  fileId: thumbnailFile.id,
                  alt: 'media'
                }, { responseType: 'stream' });
                
                const thumbnailMeta = await drive.drive.files.get({
                  fileId: thumbnailFile.id,
                  fields: 'mimeType, size'
                });
                
                res.set('Content-Type', thumbnailMeta.data.mimeType || 'image/webp');
                res.set('Content-Length', thumbnailMeta.data.size || 0);
                res.set('Cache-Control', 'public, max-age=31536000');
                res.set('Access-Control-Allow-Origin', '*');
                
                thumbnailRes.data.pipe(res);
                return;
              }
            } catch (error) {
              console.error(`[PROXY-DRIVE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ thumbnail ${thumbnailName}:`, error.message);
            }
          }
          
          console.log(`[PROXY-DRIVE] ‚ö†Ô∏è Thumbnail –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª`);
        }
      } catch (error) {
        console.error('[PROXY-DRIVE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ thumbnail:', error.message);
      }
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL
    if (fileId.startsWith('http')) {
      const decodedUrl = decodeURIComponent(fileId);
      try {
        const response = await axios.get(decodedUrl, { 
          responseType: 'arraybuffer',
          headers: {
            'User-Agent': 'Mozilla/5.0'
          }
        });
        
        res.set('Content-Type', response.headers['content-type']);
        res.set('Cache-Control', 'public, max-age=31536000');
        res.send(response.data);
        return;
      } catch (externalErr) {
        console.error('[PROXY-DRIVE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞:', externalErr);
        return res.status(404).send('External file not found');
      }
    }

    if (!drive.isInitialized) {
      console.error('[PROXY-DRIVE] Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return res.status(500).send('Google Drive not initialized');
    }

    const meta = await drive.drive.files.get({
      fileId,
      fields: 'name, mimeType, size'
    });
    
    console.log(`[PROXY-DRIVE] üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ ${fileId}:`, {
      name: meta.data.name,
      mimeType: meta.data.mimeType,
      size: meta.data.size
    });
    
    const mimeType = meta.data.mimeType || 'application/octet-stream';
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    let fileName = meta.data.name || 'file';
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      if (fileName.includes('√ê')) {
        fileName = decodeURIComponent(escape(fileName));
      }
    } catch (e) {
      console.log(`[PROXY-DRIVE] –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è ${fileId}:`, e.message);
    }
    
    const fileSize = meta.data.size || 0;
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MIME —Ç–∏–ø –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    let correctedMimeType = mimeType;
    if (fileName.toLowerCase().endsWith('.mp4') && !mimeType.startsWith('video/')) {
      correctedMimeType = 'video/mp4';
      console.log(`[PROXY-DRIVE] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω MIME —Ç–∏–ø –¥–ª—è ${fileId}: ${correctedMimeType}`);
    } else if (fileName.toLowerCase().endsWith('.webm') && !mimeType.startsWith('video/')) {
      correctedMimeType = 'video/webm';
      console.log(`[PROXY-DRIVE] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω MIME —Ç–∏–ø –¥–ª—è ${fileId}: ${correctedMimeType}`);
    } else if (fileName.toLowerCase().endsWith('.avi') && !mimeType.startsWith('video/')) {
      correctedMimeType = 'video/x-msvideo';
      console.log(`[PROXY-DRIVE] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω MIME —Ç–∏–ø –¥–ª—è ${fileId}: ${correctedMimeType}`);
    } else if (fileName.toLowerCase().endsWith('.mov') && !mimeType.startsWith('video/')) {
      correctedMimeType = 'video/quicktime';
      console.log(`[PROXY-DRIVE] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω MIME —Ç–∏–ø –¥–ª—è ${fileId}: ${correctedMimeType}`);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø –¥–ª—è –≤–∏–¥–µ–æ
    if (correctedMimeType.startsWith('video/')) {
      console.log(`[PROXY-DRIVE] –ò—Å–ø–æ–ª—å–∑—É–µ–º MIME —Ç–∏–ø –¥–ª—è –≤–∏–¥–µ–æ ${fileId}: ${correctedMimeType}`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º video/mp4 –¥–ª—è –≤—Å–µ—Ö .mp4 —Ñ–∞–π–ª–æ–≤
      if (fileName.toLowerCase().endsWith('.mp4')) {
        correctedMimeType = 'video/mp4';
        console.log(`[PROXY-DRIVE] üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º video/mp4 –¥–ª—è ${fileId}`);
      }
    } else if (fileName.toLowerCase().endsWith('.mp4')) {
      // –ï—Å–ª–∏ MIME —Ç–∏–ø –Ω–µ video/, –Ω–æ —Ñ–∞–π–ª .mp4 - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      correctedMimeType = 'video/mp4';
      console.log(`[PROXY-DRIVE] üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º video/mp4 –¥–ª—è ${fileId} (—Ñ–∞–π–ª .mp4)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if (correctedMimeType.startsWith('video/')) {
      try {
        const testBuffer = await drive.drive.files.get({
          fileId,
          alt: 'media'
        }, { 
          responseType: 'arraybuffer',
          headers: {
            'Range': 'bytes=0-15'
          }
        });
        
        const firstBytes = Buffer.from(testBuffer.data.slice(0, 16)).toString('hex');
        console.log(`[PROXY-DRIVE] üîç –ü–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç —Ñ–∞–π–ª–∞ ${fileId}: ${firstBytes}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if (firstBytes.startsWith('0000002066747970')) {
          // ISO Media (MP4, MOV, etc.)
          correctedMimeType = 'video/mp4';
          console.log(`[PROXY-DRIVE] üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω ISO Media —Ñ–æ—Ä–º–∞—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º video/mp4`);
        } else if (firstBytes.startsWith('52494646')) {
          // AVI
          correctedMimeType = 'video/x-msvideo';
          console.log(`[PROXY-DRIVE] üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω AVI —Ñ–æ—Ä–º–∞—Ç`);
        } else if (firstBytes.startsWith('1a45dfa3')) {
          // WebM
          correctedMimeType = 'video/webm';
          console.log(`[PROXY-DRIVE] üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω WebM —Ñ–æ—Ä–º–∞—Ç`);
        }
      } catch (error) {
        console.error(`[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è ${fileId}:`, error.message);
      }
    }
    
    console.log(`[PROXY-DRIVE] ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${fileId}: ${fileName} (${correctedMimeType}, ${fileSize} –±–∞–π—Ç)`);
    console.log(`[PROXY-DRIVE] üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${fileId}:`);
    console.log(`  - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MIME —Ç–∏–ø: ${mimeType}`);
    console.log(`  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π MIME —Ç–∏–ø: ${correctedMimeType}`);
    console.log(`  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSize} –±–∞–π—Ç`);
    console.log(`  - –≠—Ç–æ –≤–∏–¥–µ–æ: ${correctedMimeType.startsWith('video/')}`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ
    if (correctedMimeType.startsWith('video/')) {
      console.log(`[PROXY-DRIVE] üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ ${fileId}`);
      
      try {
        const fileBuffer = await drive.drive.files.get({
          fileId,
          alt: 'media'
        }, { responseType: 'arraybuffer' });
        
        console.log(`[PROXY-DRIVE] ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é: ${fileBuffer.data.byteLength} –±–∞–π—Ç`);
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
        res.set({
          'Content-Type': correctedMimeType,
          'Content-Length': fileBuffer.data.byteLength,
          'Accept-Ranges': 'bytes',
          'Access-Control-Allow-Origin': '*',
          'Cache-Control': 'public, max-age=31536000'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
        res.end(Buffer.from(fileBuffer.data));
        return;
      } catch (error) {
        console.error(`[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è ${fileId}:`, error.message);
        // Fallback –∫ —Å—Ç—Ä–∏–º—É
      }
    }

    const fileRes = await drive.drive.files.get({
      fileId,
      alt: 'media'
    }, { responseType: 'stream' });
    
    console.log(`[PROXY-DRIVE] ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω –¥–ª—è ${fileId}, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É...`);
    console.log(`[PROXY-DRIVE] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∏–º–∞ –¥–ª—è ${fileId}:`, {
      readable: fileRes.data.readable,
      destroyed: fileRes.data.destroyed,
      paused: fileRes.data.isPaused()
    });

    const range = req.headers.range;
    let headersSent = false;
    
    const sendHeaders = (statusCode, headers) => {
      if (!headersSent) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
        const videoHeaders = correctedMimeType.startsWith('video/') ? {
          'Accept-Ranges': 'bytes',
          'X-Content-Type-Options': 'nosniff',
          'X-Frame-Options': 'SAMEORIGIN'
        } : {};
        
        const finalHeaders = {
          ...headers,
          ...videoHeaders,
          'Content-Disposition': `inline; filename*=UTF-8''${encodeURIComponent(fileName)}`,
          'Access-Control-Allow-Origin': '*',
          'Cache-Control': 'public, max-age=31536000',
          'Accept-Ranges': 'bytes'
        };
        
        console.log(`[PROXY-DRIVE] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ${fileId}:`, {
          statusCode,
          'Content-Type': finalHeaders['Content-Type'],
          'Accept-Ranges': finalHeaders['Accept-Ranges'],
          'Content-Length': finalHeaders['Content-Length']
        });
        
        res.writeHead(statusCode, finalHeaders);
        headersSent = true;
      }
    };

    if (range) {
      const parts = range.replace(/bytes=/, "").split("-");
      const start = parseInt(parts[0], 10);
      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
      const chunksize = (end - start) + 1;

      console.log(`[PROXY-DRIVE] üìä Range –∑–∞–ø—Ä–æ—Å –¥–ª—è ${fileId}: ${start}-${end}/${fileSize} (chunk: ${chunksize})`);

      sendHeaders(206, {
        'Content-Range': `bytes ${start}-${end}/${fileSize}`,
        'Accept-Ranges': 'bytes',
        'Content-Length': chunksize,
        'Content-Type': correctedMimeType
      });
    } else {
      console.log(`[PROXY-DRIVE] üìä –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è ${fileId}: ${fileSize} –±–∞–π—Ç`);
      
      sendHeaders(200, {
        'Content-Length': fileSize,
        'Content-Type': correctedMimeType,
        'Accept-Ranges': 'bytes'
      });
    }

    fileRes.data.on('error', (err) => {
      console.error(`[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ –¥–ª—è ${fileId}:`, err.message);
      if (!headersSent) {
        res.status(500).send('Error streaming file');
      } else {
        res.end();
      }
    });

    fileRes.data.on('end', () => {
      console.log(`[PROXY-DRIVE] ‚úÖ –°—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${fileId}`);
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞
      if (fileRes.data && !fileRes.data.destroyed) {
        fileRes.data.destroy();
      }
    });

    fileRes.data.on('close', () => {
      console.log(`[PROXY-DRIVE] üîå –°—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç –¥–ª—è ${fileId}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–≤–µ—Ç–∞
    res.on('error', (err) => {
      console.error(`[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${fileId}:`, err.message);
      if (fileRes.data && !fileRes.data.destroyed) {
        fileRes.data.destroy();
      }
    });

    res.on('finish', () => {
      console.log(`[PROXY-DRIVE] ‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${fileId}`);
    });

    res.on('close', () => {
      console.log(`[PROXY-DRIVE] üîå –û—Ç–≤–µ—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è ${fileId}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–∞
    fileRes.data.on('data', (chunk) => {
      console.log(`[PROXY-DRIVE] üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${fileId}: ${chunk.length} –±–∞–π—Ç`);
    });

    // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∏–º –≤ –æ—Ç–≤–µ—Ç
    fileRes.data.pipe(res);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    req.on('close', () => {
      console.log(`[PROXY-DRIVE] üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –¥–ª—è ${fileId}`);
      if (fileRes.data && !fileRes.data.destroyed) {
        fileRes.data.destroy();
      }
    });
  } catch (err) {
    console.error(`[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${fileId}:`, err.message);
    console.error(`[PROXY-DRIVE] Stack trace:`, err.stack);
    
    if (err.message && err.message.includes('File not found')) {
      console.log(`[PROXY-DRIVE] üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileId}`);
      return res.status(404).send('File not found');
    }
    
    if (err.message && err.message.includes('Permission denied')) {
      console.log(`[PROXY-DRIVE] üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${fileId}`);
      return res.status(403).send('Access denied');
    }
    
    console.log(`[PROXY-DRIVE] üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId}:`, err.message);
    res.status(500).send('Proxy error: ' + err.message);
  }
});



io.on('connection', async (socket) => {
  const userId = socket.handshake.query.userId;
  if (userId) {
    socket.join(userId);
    try {
      const User = require('./models/userModel');
      await User.findByIdAndUpdate(userId, {
        isOnline: true,
        lastActive: new Date()
      });
    } catch (error) {
      console.error('Error updating user online status:', error);
    }
  }

  socket.on('disconnect', async () => {
    if (userId) {
      try {
        const User = require('./models/userModel');
        await User.findByIdAndUpdate(userId, {
          isOnline: false,
          lastActive: new Date()
        });
      } catch (error) {
        console.error('Error updating user offline status:', error);
      }
    }
  });
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  console.log(`[SERVER] üöÄ Server running on port ${PORT}`);
  startUserStatusUpdater();
  resetAllUsersToOffline();
});