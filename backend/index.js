const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const path = require('path'); // –î–æ–±–∞–≤–∏–º path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
const http = require('http');
const { Server } = require('socket.io');
const connectDB = require('./config/db'); // –ú—ã —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–∞–ª–µ–µ
const { startUserStatusUpdater } = require('./utils/userStatusUpdater');
const { resetAllUsersToOffline } = require('./utils/resetUserStatuses');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

console.log('[SERVER] üöÄ Starting Krealgram backend...');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Drive –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const googleDrive = require('./config/googleDrive');
googleDrive.initialize().then(() => {
  console.log('[SERVER] ‚úÖ Google Drive initialization completed');
}).catch((error) => {
  console.error('[SERVER] ‚ùå Google Drive initialization failed:', error.message);
  console.log('[SERVER] ‚ö†Ô∏è Server will continue without Google Drive');
});

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: [
      "http://localhost:4000",
      "http://127.0.0.1:4000",
      "https://krealgram.vercel.app",
      "https://krealgram.com",
      "https://www.krealgram.com"
    ],
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    credentials: true
  }
});

app.set('io', io); // –°–¥–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è Express
const whitelist = [
  "http://localhost:4000",
  "http://127.0.0.1:4000",
  "http://localhost:3000",
  "http://127.0.0.1:3000",
  "https://krealgram.vercel.app",
  "https://krealgram.com",
  "https://www.krealgram.com",
];
const corsOptions = {
  origin: function (origin, callback) {
    const allowedOrigins = [
      'http://localhost:4000', 
      'http://127.0.0.1:4000',
      'http://localhost:3000', 
      'http://127.0.0.1:3000',
      'https://krealgram-backend.onrender.com',
      'https://krealgram.vercel.app',
      'https://krealgram.com',
      'https://www.krealgram.com'
    ];

    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
    if (!origin || 
        origin.includes('localhost') || 
        origin.includes('127.0.0.1') || 
        allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.warn(`[CORS] Blocked origin: ${origin}`);
      callback(new Error(`Origin ${origin} not allowed`));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: [
    'Content-Type', 
    'Authorization', 
    'Origin', 
    'X-Requested-With', 
    'Accept',
    'Access-Control-Allow-Headers',
    'Access-Control-Allow-Origin'
  ],
  credentials: true,
  optionsSuccessStatus: 200,
  preflightContinue: false
};

// –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
// –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è "–Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö" –∑–∞–ø—Ä–æ—Å–æ–≤ (POST, PUT, DELETE —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏),
// –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç preflight-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞.
app.options('*', cors(corsOptions));

app.use(cors(corsOptions));

// –í–∞–∂–Ω–æ: middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ CORS
app.use(express.json({ limit: '50mb' })); // –£–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –¥–ª—è base64 –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'uploads'
// __dirname –≤ ES Modules –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫, –∫–∞–∫ –≤ CommonJS, –Ω–æ —Ç–∞–∫ –∫–∞–∫ package.json —É–∫–∞–∑—ã–≤–∞–µ—Ç "type": "commonjs" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è npm init -y)
// —Ç–æ __dirname –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ï—Å–ª–∏ –±—ã –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ "type": "module", –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å import.meta.url
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send('Krealgram API is working!');
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞
app.get('/health', (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    const mongoStatus = mongoose.connection.readyState === 1 ? 'Connected' : 'Disconnected';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Drive
    const googleDriveStatus = require('./config/googleDrive').isInitialized ? 'Initialized' : 'Not Initialized';

    res.status(200).json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      services: {
        mongodb: mongoStatus,
        googleDrive: googleDriveStatus
      },
      version: process.env.npm_package_version || 'unknown'
    });
  } catch (error) {
    console.error('Health check error:', error);
    res.status(500).json({
      status: 'error',
      message: 'Internal server error during health check'
    });
  }
});

// TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã (routes)
const authRoutes = require('./routes/authRoutes');
const postRoutes = require('./routes/postRoutes');
const userRoutes = require('./routes/userRoutes');
const commentRoutes = require('./routes/commentRoutes');
const searchRoutes = require('./routes/searchRoutes');
const likeRoutes = require('./routes/likeRoutes');
const conversationRoutes = require('./routes/conversationRoutes'); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
const notificationRoutes = require('./routes/notificationRoutes'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const adminRoutes = require('./routes/adminRoutes'); // –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã

app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/users', userRoutes);
app.use('/api/comments', commentRoutes);
app.use('/api/search', searchRoutes);
app.use('/api/likes', likeRoutes);
app.use('/api/conversations', conversationRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/admin', adminRoutes);

// –ü—Ä–æ–∫—Å–∏-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Google Drive
app.get('/api/proxy-drive/:id', async (req, res) => {
  const fileId = req.params.id;
  const { google } = require('googleapis');
  const drive = require('./config/googleDrive');

  try {
    console.log(`[PROXY-DRIVE] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${fileId}`);
    if (!drive.isInitialized) {
      console.error('[PROXY-DRIVE] Google Drive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return res.status(500).send('Google Drive not initialized');
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    const meta = await drive.drive.files.get({
      fileId,
      fields: 'name, mimeType'
    });
    const mimeType = meta.data.mimeType || 'application/octet-stream';
    const fileName = meta.data.name || 'file';
    console.log(`[PROXY-DRIVE] mimeType: ${mimeType}, fileName: ${fileName}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ñ–∞–π–ª –∫–∞–∫ stream
    const fileRes = await drive.drive.files.get({
      fileId,
      alt: 'media'
    }, { responseType: 'stream' });

    res.setHeader('Content-Type', mimeType);
    res.setHeader('Content-Disposition', `inline; filename="${fileName}"`);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', 'public, max-age=31536000');

    fileRes.data.on('end', () => {
      console.log(`[PROXY-DRIVE] –§–∞–π–ª ${fileId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç`);
    });
    fileRes.data.on('error', (err) => {
      console.error('[PROXY-DRIVE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      res.status(500).send('Error streaming file');
    });
    fileRes.data.pipe(res);
  } catch (err) {
    if (err.message && err.message.includes('File not found')) {
      console.warn(`[PROXY-DRIVE] ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileId}`);
      return res.status(404).send('File not found');
    }
    console.error('[PROXY-DRIVE] ‚ùå –û—à–∏–±–∫–∞:', err.message);
    res.status(500).send('Proxy error: ' + err.message);
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
io.on('connection', async (socket) => {
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ userId
  const userId = socket.handshake.query.userId;
  if (userId) {
    socket.join(userId);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–Ω–ª–∞–π–Ω
    try {
      const User = require('./models/userModel');
      await User.findByIdAndUpdate(userId, {
        isOnline: true,
        lastActive: new Date()
      });
    } catch (error) {
      console.error('Error updating user online status:', error);
    }
  }

  socket.on('disconnect', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if (userId) {
      try {
        const User = require('./models/userModel');
        await User.findByIdAndUpdate(userId, {
          isOnline: false,
          lastActive: new Date()
        });
      } catch (error) {
        console.error('Error updating user offline status:', error);
      }
    }
  });
});

const PORT = process.env.PORT || 3000;

// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ offline –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
resetAllUsersToOffline().then(() => {
  // console.log('All users set to offline on server start');
}).catch((error) => {
  console.error('Failed to reset user statuses:', error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
startUserStatusUpdater();

server.listen(PORT, () => {
  console.log(`[SERVER] ‚úÖ Server running on port ${PORT}`);
  if (Array.isArray(corsOptions.origin)) {
    console.log(`[SERVER] üåê CORS origins: ${corsOptions.origin.join(', ')}`);
  } else {
    console.log(`[SERVER] üåê CORS origins: ${corsOptions.origin}`);
  }
  console.log(`[SERVER] üì° Socket.IO ready`);
}); 