require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/userModel');
const GoogleDriveOAuth = require('./config/googleDriveOAuth');
const axios = require('axios');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI || process.env.MONGO_URI;
    await mongoose.connect(mongoURI);
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

const migrateUserAvatars = async () => {
  try {
    await connectDB();
    
    console.log('\nüîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ê–í–ê–¢–ê–†–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ê GOOGLE DRIVE\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive
    const googleDrive = new GoogleDriveOAuth();
    await googleDrive.initialize();
    console.log('‚úÖ Google Drive –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cloudinary ID
    const users = await User.find({
      avatar: { 
        $exists: true, 
        $ne: null, 
        $ne: '',
        $regex: /^krealgram\/posts\/[a-zA-Z0-9]+$/
      }
    });
    
    console.log(`üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Cloudinary –∞–≤–∞—Ç–∞—Ä–∞–º–∏: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    let migratedCount = 0;
    let errorCount = 0;
    
    for (const user of users) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username} (ID: ${user._id})`);
        console.log(`   –°—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä: ${user.avatar}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º Cloudinary URL
        let cloudinaryUrl = `https://res.cloudinary.com/dibcwdwsd/image/upload/${user.avatar}`;
        console.log(`   Cloudinary URL: ${cloudinaryUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
          const response = await axios.head(cloudinaryUrl, { timeout: 10000 });
          console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${response.status})`);
        } catch (error) {
          console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
          
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
          const formats = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
          let foundFormat = null;
          
          for (const format of formats) {
            try {
              const urlWithFormat = `${cloudinaryUrl}.${format}`;
              const response = await axios.head(urlWithFormat, { timeout: 5000 });
              console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: ${format}`);
              foundFormat = format;
              break;
            } catch (err) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }
          
          if (!foundFormat) {
            console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            errorCount++;
            continue;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
          cloudinaryUrl = `${cloudinaryUrl}.${foundFormat}`;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        console.log(`   üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...`);
        const response = await axios.get(cloudinaryUrl, { 
          responseType: 'arraybuffer',
          timeout: 30000
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        const contentType = response.headers['content-type'] || 'image/jpeg';
        const extension = contentType.split('/')[1] || 'jpg';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
        console.log(`   üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive...`);
        const fileName = `avatar_${user.username}_${user._id}.${extension}`;
        
        const buffer = Buffer.from(response.data);
        const driveResult = await googleDrive.uploadFile(buffer, fileName, contentType);
        const driveFileId = driveResult.fileId || driveResult;
        console.log(`   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive: ${driveFileId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findByIdAndUpdate(user._id, {
          avatar: driveFileId
        });
        
        console.log(`   ‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.username}`);
        migratedCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –ê–í–ê–¢–ê–†–û–í:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${users.length}`);
    
    if (migratedCount > 0) {
      console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ê–í–ê–¢–ê–†–û–í –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MongoDB');
  }
};

migrateUserAvatars(); 