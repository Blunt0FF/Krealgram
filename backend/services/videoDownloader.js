const YTDlpWrap = require('yt-dlp-wrap');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const cloudinary = require('../config/cloudinary');

class VideoDownloader {
  constructor() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ yt-dlp
    let ytDlpPath;
    if (process.env.RENDER) {
      // –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º pip —É—Å—Ç–∞–Ω–æ–≤–∫—É
      ytDlpPath = 'yt-dlp';
    } else if (fs.existsSync('/Users/admin/Library/Python/3.9/bin/yt-dlp')) {
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip
      ytDlpPath = '/Users/admin/Library/Python/3.9/bin/yt-dlp';
    } else {
      // –°–∏—Å—Ç–µ–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
      ytDlpPath = 'yt-dlp';
    }
    
    this.ytDlp = new YTDlpWrap(ytDlpPath);
    this.tempDir = path.join(__dirname, '../temp');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
  detectPlatform(url) {
    if (url.includes('tiktok.com')) return 'tiktok';
    if (url.includes('instagram.com')) return 'instagram';
    if (url.includes('vk.com') || url.includes('vk.ru')) return 'vk';
    if (url.includes('youtube.com') || url.includes('youtu.be')) return 'youtube';
    if (url.includes('twitter.com') || url.includes('x.com')) return 'twitter';
    return 'unknown';
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp
  async downloadVideo(url, platform) {
    const videoId = uuidv4();
    const tempVideoPath = path.join(this.tempDir, `${videoId}.%(ext)s`);
    
    try {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ —Å ${platform}: ${url}`);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      const options = [
        '--format', 'best[height<=720]', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        '--output', tempVideoPath,
        '--no-playlist',
        '--extract-flat', 'false'
      ];

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      if (platform === 'tiktok') {
        options.push('--cookies-from-browser', 'chrome');
      } else if (platform === 'instagram') {
        options.push('--cookies-from-browser', 'chrome');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
      await this.ytDlp.execPromise([url, ...options]);
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const files = fs.readdirSync(this.tempDir);
      const videoFile = files.find(file => file.startsWith(videoId));
      
      if (!videoFile) {
        throw new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
      }

      const fullVideoPath = path.join(this.tempDir, videoFile);
      console.log(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${fullVideoPath}`);
      
      return {
        filePath: fullVideoPath,
        fileName: videoFile,
        videoId: videoId
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å ${platform}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å ${platform}: ${error.message}`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary
  async uploadToCloudinary(filePath, platform) {
    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Cloudinary: ${filePath}`);
      
      const result = await cloudinary.uploader.upload(filePath, {
        resource_type: 'video',
        folder: `external_videos/${platform}`,
        quality: 'auto',
        format: 'mp4',
        transformation: [
          { width: 720, height: 1280, crop: 'limit' },
          { quality: 'auto:good' }
        ]
      });

      console.log(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary:`, result.secure_url);
      
      return {
        publicId: result.public_id,
        url: result.secure_url,
        thumbnailUrl: result.secure_url.replace('/video/upload/', '/image/upload/').replace('.mp4', '.jpg'),
        duration: result.duration,
        width: result.width,
        height: result.height,
        format: result.format,
        bytes: result.bytes
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –≤ Cloudinary: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
  async getVideoInfo(url) {
    try {
      const info = await this.ytDlp.getVideoInfo(url);
      return {
        title: info.title,
        description: info.description,
        duration: info.duration,
        uploader: info.uploader,
        thumbnail: info.thumbnail,
        viewCount: info.view_count,
        uploadDate: info.upload_date
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:', error);
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async cleanup(filePath) {
    try {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
  async processExternalVideo(url) {
    let tempFilePath = null;
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
      const platform = this.detectPlatform(url);
      if (platform === 'unknown') {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞');
      }

      console.log(`üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${platform}`);

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å yt-dlp
        const videoInfo = await this.getVideoInfo(url);
        const downloadResult = await this.downloadVideo(url, platform);
        tempFilePath = downloadResult.filePath;
        const cloudinaryResult = await this.uploadToCloudinary(tempFilePath, platform);
        await this.cleanup(tempFilePath);

        return {
          success: true,
          platform: platform,
          originalUrl: url,
          videoInfo: videoInfo,
          cloudinary: cloudinaryResult,
          mediaType: 'video',
          image: cloudinaryResult.publicId
        };
      } catch (ytDlpError) {
        console.log(`‚ö†Ô∏è yt-dlp –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è ${platform}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:`, ytDlpError.message);
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if (tempFilePath) {
          await this.cleanup(tempFilePath);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥
        return await this.processVideoFallback(url, platform);
      }

    } catch (error) {
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (tempFilePath) {
        await this.cleanup(tempFilePath);
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–µ–æ:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  static getSupportedPlatforms() {
    return [
      'tiktok',
      'instagram', 
      'vk',
      'youtube',
      'twitter'
    ];
  }

  // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –±–µ–∑ yt-dlp
  async processVideoFallback(url, platform) {
    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è ${platform}`);
    
    // –î–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
    if (platform === 'youtube') {
      const SimpleDownloader = require('./simpleVideoDownloader');
      const simpleDownloader = new SimpleDownloader();
      return await simpleDownloader.processExternalVideo(url);
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const videoId = uuidv4();
    const mockThumbnail = `https://via.placeholder.com/640x360/000000/FFFFFF?text=${platform.toUpperCase()}+Video`;
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ Cloudinary
      const result = await cloudinary.uploader.upload(mockThumbnail, {
        resource_type: 'image',
        folder: `external_videos/${platform}`,
        public_id: `placeholder_${videoId}`,
        quality: 'auto',
        format: 'jpg'
      });

      return {
        success: true,
        platform: platform,
        originalUrl: url,
        videoInfo: {
          title: `${platform.charAt(0).toUpperCase() + platform.slice(1)} Video`,
          uploader: 'Unknown',
          thumbnail: mockThumbnail
        },
        cloudinary: {
          publicId: result.public_id,
          url: result.secure_url,
          thumbnailUrl: result.secure_url,
          width: result.width,
          height: result.height,
          format: result.format,
          bytes: result.bytes
        },
        mediaType: 'video',
        image: result.public_id,
        isPlaceholder: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      };
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è ${platform}: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
  static isValidUrl(url) {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }
}

module.exports = VideoDownloader; 