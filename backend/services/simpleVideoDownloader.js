const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const cloudinary = require('../config/cloudinary');

class SimpleVideoDownloader {
  constructor() {
    this.tempDir = path.join(__dirname, '../temp');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL
  detectPlatform(url) {
    if (url.includes('tiktok.com')) return 'tiktok';
    if (url.includes('instagram.com')) return 'instagram';
    if (url.includes('vk.com') || url.includes('vk.ru')) return 'vk';
    if (url.includes('youtube.com') || url.includes('youtu.be')) return 'youtube';
    if (url.includes('twitter.com') || url.includes('x.com')) return 'twitter';
    return 'unknown';
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
  extractYouTubeId(url) {
    const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ YouTube –≤–∏–¥–µ–æ
  async getYouTubeInfo(videoId) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
      const response = await axios.get(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);
      
      return {
        title: response.data.title,
        author_name: response.data.author_name,
        thumbnail_url: response.data.thumbnail_url,
        duration: null, // –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ oEmbed
        platform: 'youtube'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ YouTube –≤–∏–¥–µ–æ:', error);
      return null;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –≤ Cloudinary
  async uploadThumbnailToCloudinary(thumbnailUrl, platform, videoId) {
    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–µ–≤—å—é –≤ Cloudinary: ${thumbnailUrl}`);
      
      const result = await cloudinary.uploader.upload(thumbnailUrl, {
        resource_type: 'image',
        folder: `external_videos/${platform}/thumbnails`,
        public_id: `thumb_${videoId}`,
        quality: 'auto',
        format: 'jpg'
      });

      console.log(`‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary:`, result.secure_url);
      
      return {
        publicId: result.public_id,
        url: result.secure_url,
        width: result.width,
        height: result.height,
        format: result.format,
        bytes: result.bytes
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –≤ Cloudinary:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é –≤ Cloudinary: ${error.message}`);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –≤–∏–¥–µ–æ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ YouTube)
  async processExternalVideo(url) {
    try {
      const platform = this.detectPlatform(url);
      
      if (platform === 'youtube') {
        const videoId = this.extractYouTubeId(url);
        if (!videoId) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL');
        }

        console.log(`üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é YouTube –≤–∏–¥–µ–æ: ${videoId}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        const videoInfo = await this.getYouTubeInfo(videoId);
        if (!videoInfo) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –≤ Cloudinary
        const thumbnailResult = await this.uploadThumbnailToCloudinary(
          videoInfo.thumbnail_url, 
          platform, 
          videoId
        );

        return {
          success: true,
          platform: platform,
          originalUrl: url,
          videoInfo: {
            title: videoInfo.title,
            uploader: videoInfo.author_name,
            thumbnail: videoInfo.thumbnail_url,
            videoId: videoId
          },
          cloudinary: {
            publicId: thumbnailResult.publicId,
            url: thumbnailResult.url,
            thumbnailUrl: thumbnailResult.url,
            width: thumbnailResult.width,
            height: thumbnailResult.height,
            format: thumbnailResult.format,
            bytes: thumbnailResult.bytes
          },
          mediaType: 'video',
          image: thumbnailResult.publicId, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º–æ–π
          youtubeData: {
            videoId: videoId,
            embedUrl: `https://www.youtube.com/embed/${videoId}`,
            thumbnailUrl: thumbnailResult.url,
            title: videoInfo.title,
            platform: 'youtube',
            originalUrl: url
          }
        };
      } else {
        throw new Error(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${platform} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ YouTube.`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–µ–æ:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  static getSupportedPlatforms() {
    return ['youtube']; // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ YouTube
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
  static isValidUrl(url) {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }
}

module.exports = SimpleVideoDownloader; 