const fs = require('fs');
const path = require('path');
const ffmpeg = require('fluent-ffmpeg');
const googleDrive = require('../config/googleDrive');

class ThumbnailGenerator {
  constructor() {
    this.previewDir = path.join(__dirname, '../backend/temp/preview');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.previewDir)) {
      fs.mkdirSync(this.previewDir, { recursive: true });
    }
  }

  async generateGifPreview(videoPath, platform, videoId) {
    try {
      const outputFilename = `${platform}_${videoId}_preview.gif`;
      const outputPath = path.join(this.previewDir, outputFilename);

      return new Promise((resolve, reject) => {
        ffmpeg(videoPath)
          .fps(30)
          .duration(30)
          .size('320x?')
          .outputOptions('-vf', 'scale=320:-2')
          .toFormat('gif')
          .on('end', () => {
            console.log(`‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${outputPath}`);
            resolve(outputPath);
          })
          .on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é:', err);
            reject(err);
          })
          .save(outputPath);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', error);
      throw error;
    }
  }

  async uploadPreviewToGoogleDrive(thumbnailPath, platform, videoId) {
    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–µ–≤—å—é –≤ Google Drive: ${thumbnailPath}`);
      
      const fileMetadata = {
        name: `${platform}_${videoId}_preview.gif`,
        parents: [process.env.GOOGLE_DRIVE_PREVIEW_FOLDER_ID]
      };
      
      const media = {
        mimeType: 'image/gif',
        body: fs.createReadStream(thumbnailPath)
      };

      const result = await googleDrive.drive.files.create({
        resource: fileMetadata,
        media: media,
        fields: 'id, webViewLink, webContentLink'
      });

      console.log(`‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Drive:`, result.data.webContentLink);
      return result.data.webContentLink;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –≤ Google Drive:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é –≤ Google Drive: ${error.message}`);
    }
  }

  async processVideoPreview(videoPath, platform, videoId) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
      const thumbnailPath = await this.generateGifPreview(videoPath, platform, videoId);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –≤ Google Drive
      const thumbnailResult = await this.uploadPreviewToGoogleDrive(thumbnailPath, platform, videoId);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–µ–≤—å—é
      fs.unlinkSync(thumbnailPath);

      return {
        thumbnailPath,
        thumbnailUrl: thumbnailResult
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:', error);
      throw error;
    }
  }
}

module.exports = new ThumbnailGenerator(); 