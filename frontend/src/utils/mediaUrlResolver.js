import { API_URL, getCurrentDomain } from '../config';

const ALLOWED_DOMAINS = [
  'krealgram.com',
  'www.krealgram.com',
  'krealgram.vercel.app',
  'localhost',
  'krealgram-backend.onrender.com',
  '127.0.0.1'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Google Drive File ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL
const extractGoogleDriveFileId = (url) => {
  if (!url || !url.includes('drive.google.com')) return null;
  
  try {
    // –§–æ—Ä–º–∞—Ç: https://drive.google.com/uc?id=FILE_ID
    const ucMatch = url.match(/[?&]id=([^&]+)/);
    if (ucMatch) return ucMatch[1];
    
    // –§–æ—Ä–º–∞—Ç: https://drive.google.com/file/d/FILE_ID/view
    const fileMatch = url.match(/\/file\/d\/([^/]+)/);
    if (fileMatch) return fileMatch[1];
    
    // –§–æ—Ä–º–∞—Ç: https://drive.google.com/open?id=FILE_ID
    const openMatch = url.match(/open\?id=([^&]+)/);
    if (openMatch) return openMatch[1];
    
    // –ï—Å–ª–∏ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ FILE_ID
    const parts = url.split('/');
    const lastPart = parts[parts.length - 1];
    if (lastPart && lastPart.length > 20 && !lastPart.includes('.')) {
      return lastPart;
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Google Drive ID:', error);
    return null;
  }
};

export const resolveMediaUrl = (url, type = 'image') => {
  const startTime = performance.now();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  try {
    // –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if (!url) {
      const defaultMap = {
        'image': '/default-post-placeholder.png',
        'video': '/video-placeholder.svg',
        'avatar': '/default-avatar.png',
        'message': null  // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      };
      
      return defaultMap[type] || '/default-avatar.png';
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º URL —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if (typeof url === 'object' && url !== null) {
      const urlKeys = [
        'imageUrl', 'image', 'thumbnailUrl', 
        'videoUrl', 'avatarUrl', 'url', 
        'secure_url', 'path'
      ];

      for (const key of urlKeys) {
        if (url[key]) {
          url = url[key];
          break;
        }
      }
      
      if (typeof url === 'object') {
        return type === 'message' ? null : '/default-avatar.png';
      }
    }

    // –ï—Å–ª–∏ URL –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    if (!url) {
      return type === 'message' ? null : '/default-avatar.png';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if (url.startsWith('/opt/render/') || url.startsWith('/tmp/') || url.startsWith('/var/')) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—É—Ç–∏
      const filename = url.split('/').pop();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
      if (!filename || filename === url) {
        return type === 'message' ? null : '/default-avatar.png';
      }
      
      // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
      const proxyUrl = `${API_URL}/api/proxy-drive/${encodeURIComponent(filename)}?type=${type}`;
      
      return proxyUrl;
    }

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π HTTP/HTTPS URL
    if (url.startsWith('http')) {
      // Google Drive –æ–±—Ä–∞–±–æ—Ç–∫–∞
      if (url.includes('drive.google.com')) {
        const fileId = extractGoogleDriveFileId(url);
        
        if (fileId) {
          // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Google Drive —Ñ–∞–π–ª–æ–≤
          const proxyUrl = `${API_URL}/api/proxy-drive/${fileId}?type=${type}`;
          return proxyUrl;
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∫–∞–∫ fallback
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Google Drive ID –∏–∑ URL:', url);
          return url;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
      try {
        const parsedUrl = new URL(url);
        const currentDomain = getCurrentDomain();
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–æ–º–µ–Ω–æ–º URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (!ALLOWED_DOMAINS.some(domain => parsedUrl.hostname.includes(domain))) {
          const proxyUrl = `${API_URL}/api/proxy-drive/${encodeURIComponent(url)}?type=${type}`;
          return proxyUrl;
        }
      } catch (error) {
        // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      }
      
      return url;
    }

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    const localUrlMap = {
      'image': `${API_URL}/uploads/${url}`,
      'video': `${API_URL}/uploads/${url}`,
      'avatar': `${API_URL}/uploads/avatars/${url}`,
      'message': `${API_URL}/uploads/${url}`
    };

    return localUrlMap[type] || `${API_URL}/uploads/${url}`;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ resolveMediaUrl:', error);
    return type === 'message' ? null : '/default-avatar.png';
  } finally {
    const endTime = performance.now();
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ª–æ–≥
    // console.log(`resolveMediaUrl: ${endTime - startTime}ms`, { url, type });
  }
};

export const getImageUrl = (url) => resolveMediaUrl(url, 'image');
export const getVideoUrl = (url) => resolveMediaUrl(url, 'video');
export const getAvatarUrl = (url) => resolveMediaUrl(url, 'avatar');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
export const isUrlAllowed = (url) => {
  try {
    const parsedUrl = new URL(url);
    return ALLOWED_DOMAINS.some(domain => 
      parsedUrl.hostname.includes(domain)
    );
  } catch {
    return false;
  }
}; 

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const testMediaUrlResolver = () => {
  const testCases = [
    { input: null, type: 'avatar', description: 'Null –∑–Ω–∞—á–µ–Ω–∏–µ' },
    { input: '', type: 'avatar', description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
    { input: 'test.jpg', type: 'avatar', description: '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª' },
    { input: '/uploads/avatars/test.jpg', type: 'avatar', description: '–ü—É—Ç—å —Å uploads' },
    { input: 'https://drive.google.com/uc?id=123', type: 'avatar', description: 'Google Drive URL' },
    { input: { avatarUrl: 'test.jpg' }, type: 'avatar', description: '–û–±—ä–µ–∫—Ç —Å avatarUrl' }
  ];

  console.group('üîç MediaUrlResolver Test');
  testCases.forEach(({ input, type, description }) => {
    try {
      const result = resolveMediaUrl(input, type);
      console.log(`üì∏ ${description}:`, {
        input,
        type,
        result
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${description}:`, error);
    }
  });
  console.groupEnd();
}; 