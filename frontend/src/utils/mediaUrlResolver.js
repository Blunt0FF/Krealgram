import { API_URL, getCurrentDomain } from '../config';

const ALLOWED_DOMAINS = [
  'krealgram.com',
  'krealgram.vercel.app',
  'krealgram-backend.onrender.com',
  'drive.google.com',
  'localhost', // –î–æ–±–∞–≤–ª—è–µ–º localhost
  'localhost:3000',
  'localhost:4000'
];

export const resolveMediaUrl = (url, type = 'image') => {
  console.log(`üîó Resolving ${type} URL`, { 
    url, 
    type, 
    environment: {
      hostname: window.location.hostname,
      protocol: window.location.protocol,
      API_URL: import.meta.env.VITE_API_URL || 'http://localhost:3000'
    }
  });

  // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
  if (!url || typeof url !== 'string') {
    console.warn(`‚ùå Invalid URL for ${type}:`, url);
    return getDefaultUrl(type);
  }

  // Trim –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
  const trimmedUrl = url.trim();

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Google Drive URL
  if (trimmedUrl.includes('drive.google.com/uc')) {
    console.log('üåê Processing Google Drive URL:', trimmedUrl);
    return trimmedUrl;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö URL
  if (/^https?:\/\//i.test(trimmedUrl)) {
    console.log('‚úÖ Absolute URL detected:', trimmedUrl);
    return trimmedUrl;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
  if (trimmedUrl.startsWith('/')) {
    const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3000';
    const fullUrl = `${baseUrl}${trimmedUrl}`;
    console.log('üîó Constructed full URL:', fullUrl);
    return fullUrl;
  }

  console.warn(`‚ö†Ô∏è Unhandled URL type for ${type}:`, trimmedUrl);
  return getDefaultUrl(type);
};

const getDefaultUrl = (type) => {
  const defaults = {
    'avatar': '/default-avatar.png',
    'image': '/default-post-placeholder.png',
    'video': '/video-placeholder.png'
  };
  
  console.log(`üñºÔ∏è Returning default ${type} URL`);
  return defaults[type] || '/default-placeholder.png';
};

export const getImageUrl = (url) => resolveMediaUrl(url, 'image');
export const getVideoUrl = (url) => resolveMediaUrl(url, 'video');
export const getAvatarUrl = (url) => resolveMediaUrl(url, 'avatar');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
export const isUrlAllowed = (url) => {
  try {
    const parsedUrl = new URL(url);
    return ALLOWED_DOMAINS.some(domain => {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–¥–æ–º–µ–Ω
      return parsedUrl.hostname === domain || 
             parsedUrl.hostname.endsWith(`.${domain}`) ||
             parsedUrl.hostname.includes(domain);
    });
  } catch {
    return false;
  }
}; 