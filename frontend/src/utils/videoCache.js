// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
class VideoCache {
  constructor() {
    this.cache = new Map();
    this.preloadedElements = new Map();
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –∫—ç—à
   * @param {string} url - URL –≤–∏–¥–µ–æ
   * @param {HTMLVideoElement} videoElement - –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π video —ç–ª–µ–º–µ–Ω—Ç
   */
  addPreloadedVideo(url, videoElement) {
    this.preloadedElements.set(url, videoElement);
    console.log(`üì¶ Video cached: ${url}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞
   * @param {string} url - URL –≤–∏–¥–µ–æ
   * @returns {HTMLVideoElement|null} - –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π video —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ null
   */
  getPreloadedVideo(url) {
    const videoElement = this.preloadedElements.get(url);
    if (videoElement) {
      console.log(`üéØ Using cached video: ${url}`);
      return videoElement;
    }
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
   * @param {string} url - URL –≤–∏–¥–µ–æ
   * @returns {boolean} - true –µ—Å–ª–∏ –≤–∏–¥–µ–æ –≤ –∫—ç—à–µ
   */
  hasVideo(url) {
    return this.preloadedElements.has(url);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π video —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   * @param {string} url - URL –≤–∏–¥–µ–æ
   * @returns {HTMLVideoElement} - –ù–æ–≤—ã–π video —ç–ª–µ–º–µ–Ω—Ç
   */
  createVideoElement(url) {
    const preloadedVideo = this.getPreloadedVideo(url);
    
    if (preloadedVideo) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –∫–æ–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ
      const newVideo = document.createElement('video');
      newVideo.crossOrigin = preloadedVideo.crossOrigin;
      newVideo.preload = preloadedVideo.preload;
      newVideo.muted = preloadedVideo.muted;
      newVideo.playsInline = preloadedVideo.playsInline;
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ src
      if (preloadedVideo.readyState >= 1) {
        newVideo.src = preloadedVideo.src;
        console.log(`üöÄ Using preloaded video data: ${url}`);
      } else {
        // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π URL
        newVideo.src = url;
      }
      
      return newVideo;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const video = document.createElement('video');
    video.crossOrigin = 'anonymous';
    video.preload = 'metadata';
    video.muted = true;
    video.playsInline = true;
    video.src = url;
    
    return video;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à
   */
  clear() {
    this.preloadedElements.forEach((video, url) => {
      video.src = '';
      video.load();
    });
    this.preloadedElements.clear();
    console.log('üóëÔ∏è Video cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
   */
  getStats() {
    return {
      total: this.preloadedElements.size,
      loaded: Array.from(this.preloadedElements.values()).filter(v => v.readyState >= 1).length
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
const videoCache = new VideoCache();

export default videoCache; 