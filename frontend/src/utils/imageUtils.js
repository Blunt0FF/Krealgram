import { processMediaUrl } from './urlUtils';
import axios from 'axios';
import { API_URL } from '../config';
import { getAvatarUrl as resolveAvatarUrl } from './mediaUrlResolver';
import heic2any from 'heic2any';

const isImageFile = (file) => {
  return file && file.type.startsWith('image/');
};

export const compressImage = async (file, maxSizeKB = 500, maxWidth = 1920) => {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  return file;
};

export const getFileSizeKB = (dataUrl) => {
  return Math.round(dataUrl.length / 1024);
}; 

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è
export const compressPostImage = (file) => {
  return Promise.resolve(file);
};

export const compressAvatar = async (file) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (!isImageFile(file)) {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.');
    }

    console.log('üîß Starting avatar compression for:', file.name, 'Size:', file.size, 'Type:', file.type);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HEIC/HEIF
    const isHeic = file.type === 'image/heic' || file.type === 'image/heif' || 
                   file.name.toLowerCase().endsWith('.heic') || file.name.toLowerCase().endsWith('.heif');
    
    let processedFile = file;
    
    if (isHeic) {
      console.log('üîß HEIC/HEIF file detected, converting to JPEG');
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC –≤ JPEG
        const convertedBlob = await heic2any({
          blob: file,
          toType: 'image/jpeg',
          quality: 0.8
        });
        
        processedFile = new File([convertedBlob], file.name.replace(/\.(heic|heif)$/i, '.jpg'), {
          type: 'image/jpeg',
          lastModified: Date.now()
        });
        
        console.log('üîß HEIC converted to JPEG for avatar:', {
          originalSize: file.size,
          convertedSize: processedFile.size
        });
      } catch (conversionError) {
        console.warn('‚ö†Ô∏è HEIC conversion failed for avatar, using original file:', conversionError);
        processedFile = file;
      }
    }

    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3.4MB
        const maxWidth = img.width;
        const maxHeight = img.height;
        let { width, height } = img;

        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }

        canvas.width = width;
        canvas.height = height;

        console.log('üîß Avatar canvas dimensions:', width, 'x', height);

        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 65% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3-3.4MB
        canvas.toBlob((blob) => {
          if (blob) {
            const compressedFile = new File([blob], processedFile.name, {
              type: 'image/jpeg',
              lastModified: Date.now()
            });
            console.log('üîß Avatar compression result:', {
              originalSize: file.size,
              compressedSize: compressedFile.size,
              compressionRatio: (compressedFile.size / file.size * 100).toFixed(1) + '%',
              targetAchieved: compressedFile.size <= 3.4 * 1024 * 1024 ? '‚úÖ' : '‚ùå',
              sizeMB: (compressedFile.size / (1024 * 1024)).toFixed(2) + ' MB'
            });
            resolve(compressedFile);
          } else {
            reject(new Error('Failed to compress avatar'));
          }
        }, 'image/jpeg', 0.65); // –ö–∞—á–µ—Å—Ç–≤–æ 65% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3-3.4MB
      };
      
      img.onerror = () => reject(new Error('Failed to load avatar image'));
      img.src = URL.createObjectURL(processedFile);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return file; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
};

export const uploadAvatar = async (file) => {
  try {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω base64, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ File
    if (typeof file === 'string') {
      const response = await fetch(file);
      const blob = await response.blob();
      const mimeType = response.headers.get('content-type') || 'image/jpeg';
      file = new File([blob], `avatar.${mimeType.split('/')[1]}`, { type: mimeType });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (!isImageFile(file)) {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.');
    }

    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–∫–∞–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤)
    const compressedFile = await compressAvatar(file);

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const formData = new FormData();
    formData.append('avatar', compressedFile);

    const token = localStorage.getItem('token');
    const response = await axios.put(
      `${API_URL}/api/users/profile`,
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        }
      }
    );

    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    throw error;
  }
};

// –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import { resolveMediaUrl } from './mediaUrlResolver';
export const getImageUrl = resolveMediaUrl;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è thumbnail –≤–µ—Ä—Å–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
export const getAvatarThumbnailUrl = (avatarPath) => {
  if (!avatarPath) {
    return '/default-avatar.png';
  }

  // –ï—Å–ª–∏ —ç—Ç–æ Google Drive URL, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å thumbnail
  if (avatarPath.includes('drive.google.com')) {
    try {
      const fileId = avatarPath.match(/\/uc\?id=([^&]+)/)?.[1] || 
                     avatarPath.match(/\/d\/([^/]+)/)?.[1] || 
                     avatarPath.split('id=')[1];
      
      if (fileId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ localStorage —Ñ–ª–∞–≥ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        const proxyBroken = localStorage.getItem('proxyBroken') === 'true';
        
        if (proxyBroken) {
          // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Å–ª–æ–º–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ URL Google Drive
          return `https://drive.google.com/thumbnail?id=${fileId}&sz=w150-h150-c`;
        } else {
          // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏
          return `${API_URL}/api/proxy-drive/${fileId}?type=thumbnail`;
        }
      }
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      return resolveAvatarUrl(avatarPath);
    }
  }

  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö URL –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  return resolveAvatarUrl(avatarPath);
};

// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const getAvatarUrl = (avatarPath) => {
  return resolveAvatarUrl(avatarPath);
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export const getVideoUrl = (videoPath, options = {}) => {
  if (!videoPath) return null;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ mediaUrlResolver
  return processMediaUrl(videoPath, 'video');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
export const refreshAvatarCache = () => {
  // –û—á–∏—â–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  if ('caches' in window) {
    caches.keys().then(cacheNames => {
      cacheNames.forEach(cacheName => {
        if (cacheName.includes('image') || cacheName.includes('avatar')) {
          caches.delete(cacheName);
        }
      });
    });
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const avatarImages = document.querySelectorAll('img[src*="avatar"], img[src*="proxy-drive"]');
  avatarImages.forEach(img => {
    const currentSrc = img.src;
    if (currentSrc && !currentSrc.includes('default-avatar.png')) {
      const separator = currentSrc.includes('?') ? '&' : '?';
      img.src = `${currentSrc}${separator}t=${Date.now()}`;
    }
  });
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
export const refreshAvatarOnError = (imgElement, avatarPath) => {
  if (!avatarPath || avatarPath.includes('default-avatar.png')) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Google Drive URL –∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  if (avatarPath.includes('drive.google.com') && imgElement.src.includes('proxy-drive')) {
    try {
      const fileId = avatarPath.match(/\/uc\?id=([^&]+)/)?.[1] || 
                     avatarPath.match(/\/d\/([^/]+)/)?.[1] || 
                     avatarPath.split('id=')[1];
      
      if (fileId) {
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        localStorage.setItem('proxyBroken', 'true');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º—ã–µ URL Google Drive
        const directUrl = `https://drive.google.com/thumbnail?id=${fileId}&sz=w150-h150-c`;
        imgElement.src = directUrl;
        
        console.log('üîÑ Switched to direct Google Drive URL for avatar');
        return;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error switching to direct Google Drive URL:', error);
    }
  }
  
  // –û–±—ã—á–Ω—ã–π fallback - –¥–æ–±–∞–≤–ª—è–µ–º –∫—ç—à-–±–∞—Å—Ç–µ—Ä
  const separator = imgElement.src.includes('?') ? '&' : '?';
  imgElement.src = `${imgElement.src}${separator}t=${Date.now()}`;
};

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∞–≤–∞—Ç–∞—Ä–∞ —Å –∫—ç—à-–±–∞—Å—Ç–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export const getAvatarUrlWithCacheBuster = (avatarPath, forceRefresh = false) => {
  const baseUrl = getAvatarThumbnailUrl(avatarPath);
  if (baseUrl && !baseUrl.includes('default-avatar.png') && forceRefresh) {
    const separator = baseUrl.includes('?') ? '&' : '?';
    return `${baseUrl}${separator}t=${Date.now()}`;
  }
  return baseUrl;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫—Å–∏
export const checkProxyStatus = async () => {
  try {
    const testFileId = 'test123';
    const response = await fetch(`${API_URL}/api/proxy-drive/${testFileId}?type=thumbnail`);
    
    if (response.ok) {
      // –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      localStorage.removeItem('proxyBroken');
      console.log('‚úÖ Proxy is working, resetting flag');
      return true;
    } else {
      // –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      localStorage.setItem('proxyBroken', 'true');
      console.log('‚ùå Proxy is broken, setting flag');
      return false;
    }
  } catch (error) {
    // –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    localStorage.setItem('proxyBroken', 'true');
    console.log('‚ùå Proxy check failed, setting flag');
    return false;
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É —Å–∞–π—Ç—É
export const refreshAllAvatarCaches = async () => {
  try {
    console.log('üîÑ Starting global avatar cache refresh...');
    
    // 1. –û—á–∏—â–∞–µ–º –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      for (const cacheName of cacheNames) {
        if (cacheName.includes('image') || cacheName.includes('avatar')) {
          await caches.delete(cacheName);
          console.log(`üóëÔ∏è Deleted cache: ${cacheName}`);
        }
      }
    }
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
    try {
      const storedUser = JSON.parse(localStorage.getItem('user') || '{}');
      if (storedUser._id) {
        const token = localStorage.getItem('token');
        const response = await fetch(`${API_URL}/api/users/profile/${storedUser._id}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
          const userData = await response.json();
          localStorage.setItem('user', JSON.stringify(userData.user));
          console.log('‚úÖ Updated current user data in localStorage');
        }
      }
    } catch (error) {
      console.error('‚ùå Error updating current user data:', error);
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      const { getRecentUsers, addRecentUser } = await import('./recentUsers');
      const recent = getRecentUsers();
      
      if (recent.length > 0) {
        const token = localStorage.getItem('token');
        const updatedUsers = [];
        
        for (const user of recent) {
          try {
            const response = await fetch(`${API_URL}/api/users/profile/${user._id}`, {
              headers: { 'Authorization': `Bearer ${token}` }
            });
            
            if (response.ok) {
              const data = await response.json();
              updatedUsers.push(data.user);
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Could not update user ${user._id}:`, error);
            updatedUsers.push(user);
          }
        }
        
        if (updatedUsers.length > 0) {
          localStorage.setItem('recentUsers', JSON.stringify(updatedUsers));
          console.log(`‚úÖ Updated ${updatedUsers.length} recent users`);
        }
      }
    } catch (error) {
      console.error('‚ùå Error updating recent users:', error);
    }
    
    // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const avatarImages = document.querySelectorAll('img[src*="avatar"], img[src*="proxy-drive"]');
    let refreshedCount = 0;
    
    avatarImages.forEach(img => {
      const currentSrc = img.src;
      if (currentSrc && !currentSrc.includes('default-avatar.png')) {
        const separator = currentSrc.includes('?') ? '&' : '?';
        img.src = `${currentSrc}${separator}t=${Date.now()}`;
        refreshedCount++;
      }
    });
    
    console.log(`üîÑ Refreshed ${refreshedCount} avatar images on page`);
    console.log('‚úÖ Global avatar cache refresh completed');
    
    return {
      success: true,
      refreshedImages: refreshedCount,
      updatedUsers: true
    };
    
  } catch (error) {
    console.error('‚ùå Error in global avatar cache refresh:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export const initializeAvatarCache = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞)
  const lastUpdate = localStorage.getItem('avatarCacheLastUpdate');
  const now = Date.now();
  const oneHour = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  if (!lastUpdate || (now - parseInt(lastUpdate)) > oneHour) {
    console.log('üîÑ Avatar cache is stale, refreshing...');
    setTimeout(() => {
      refreshAllAvatarCaches().then(() => {
        localStorage.setItem('avatarCacheLastUpdate', now.toString());
      });
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  }
};
