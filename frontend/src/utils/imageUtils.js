import { API_URL } from '../config';

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
 * @param {File} file - —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} maxWidth - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
 * @param {number} maxHeight - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞  
 * @param {number} quality - –∫–∞—á–µ—Å—Ç–≤–æ (0.1 - 1.0)
 * @param {string} type - —Ç–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'image/jpeg' –∏–ª–∏ 'image/webp')
 * @returns {Promise<Blob>} - Blob —Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const compressImage = (file, maxWidth = 800, maxHeight = 800, quality = 0.8, type = 'image/jpeg') => {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();

    img.onload = () => {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      let { width, height } = img;
      
      if (width > height) {
        if (width > maxWidth) {
          height = (height * maxWidth) / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width = (width * maxHeight) / height;
          height = maxHeight;
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
      canvas.width = width;
      canvas.height = height;

      // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx.drawImage(img, 0, 0, width, height);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Blob
      canvas.toBlob(
        (blob) => {
          if (blob) {
            console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: ${file.size} –±–∞–π—Ç -> ${blob.size} –±–∞–π—Ç`);
            resolve(blob);
          } else {
            reject(new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blob –∏–∑ canvas'));
          }
        },
        type, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
        quality
      );
    };

    img.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const reader = new FileReader();
    reader.onload = (e) => {
      img.src = e.target.result;
    };
    reader.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
    };
    reader.readAsDataURL(file);
  });
};

/**
 * –°–∂–∏–º–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è WebP 250x250 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —Å—Ç—Ä–æ–∫—É.
 * @param {File} file - —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} - base64 —Å—Ç—Ä–æ–∫–∞ —Å–∂–∞—Ç–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (data:image/webp;base64,...)
 */
export const compressAvatar = (file) => {
  return new Promise((resolve, reject) => {
    if (!isImageFile(file)) {
      return reject(new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.'));
    }

    const img = new Image();
    img.onload = () => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const targetSize = 250; // –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞

      canvas.width = targetSize;
      canvas.height = targetSize;

      // –û–±—Ä–µ–∑–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ targetSize x targetSize
      let sourceX = 0;
      let sourceY = 0;
      let sourceWidth = img.width;
      let sourceHeight = img.height;

      if (img.width > img.height) { // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        sourceX = (img.width - img.height) / 2;
        sourceWidth = img.height;
      } else if (img.height > img.width) { // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        sourceY = (img.height - img.width) / 2;
        sourceHeight = img.width;
      }
      // –ï—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ, sourceX –∏ sourceY –æ—Å—Ç–∞—é—Ç—Å—è 0, sourceWidth –∏ sourceHeight —Ä–∞–≤–Ω—ã img.width/height

      ctx.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, targetSize, targetSize);

      try {
        const dataUrl = canvas.toDataURL('image/webp', 0.8); // –ö–∞—á–µ—Å—Ç–≤–æ 0.8 –¥–ª—è WebP
        resolve(dataUrl);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP, –ø—ã—Ç–∞–µ–º—Å—è JPEG:', error);
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ –Ω–∞ JPEG, –µ—Å–ª–∏ WebP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
        try {
          const dataUrlJpeg = canvas.toDataURL('image/jpeg', 0.85);
          resolve(dataUrlJpeg);
        } catch (jpegError) {
          reject(new Error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ canvas.toDataURL: ' + jpegError.message));
        }
      }
    };
    img.onerror = () => {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞.'));
    };

    const reader = new FileReader();
    reader.onload = (e) => {
      if (e.target && typeof e.target.result === 'string') {
        img.src = e.target.result;
      } else {
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞.'));
      }
    };
    reader.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ FileReader –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞.'));
    };
    reader.readAsDataURL(file);
  });
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–∞ (–±–µ–∑ —Å–∂–∞—Ç–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)
 * @param {File} file - —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
 * @returns {Promise<File>} - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export const compressPostImage = (file) => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è
  // –°–∂–∞—Ç–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ backend —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  return Promise.resolve(file);
};

// –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 100–ö–ë)
export const compressMessageImage = (file, maxSizeKB = 100) => {
  return new Promise((resolve) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      const maxWidth = 800;
      const maxHeight = 600;
      let { width, height } = img;
      
      if (width > height) {
        if (width > maxWidth) {
          height = (height * maxWidth) / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width = (width * maxHeight) / height;
          height = maxHeight;
        }
      }
      
      canvas.width = width;
      canvas.height = height;
      
      // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx.drawImage(img, 0, 0, width, height);
      
      // –°–∂–∏–º–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      let quality = 0.9;
      let compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
      
      // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ maxSizeKB, —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
      while (compressedDataUrl.length > maxSizeKB * 1024 && quality > 0.1) {
        quality -= 0.1;
        compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
      }
      
      resolve(compressedDataUrl);
    };
    
    img.src = URL.createObjectURL(file);
  });
};

// –°–∂–∞—Ç–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–¥–æ 50–ö–ë)
export const compressAvatarAdvanced = (file, maxSizeKB = 50) => {
  return new Promise((resolve) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      // –ê–≤–∞—Ç–∞—Ä –≤—Å–µ–≥–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π
      const size = 400;
      canvas.width = size;
      canvas.height = size;
      
      // –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
      const { width, height } = img;
      const minDimension = Math.min(width, height);
      const startX = (width - minDimension) / 2;
      const startY = (height - minDimension) / 2;
      
      ctx.drawImage(img, startX, startY, minDimension, minDimension, 0, 0, size, size);
      
      // –°–∂–∏–º–∞–µ–º
      let quality = 0.8;
      let compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
      
      while (compressedDataUrl.length > maxSizeKB * 1024 && quality > 0.1) {
        quality -= 0.1;
        compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
      }
      
      resolve(compressedDataUrl);
    };
    
    img.src = URL.createObjectURL(file);
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
export const isImageFile = (file) => {
  return file && file.type.startsWith('image/');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –ö–ë
export const getFileSizeKB = (dataUrl) => {
  return Math.round(dataUrl.length / 1024);
}; 

export const getImageUrl = (imagePath, options = {}) => {
  console.group('üñºÔ∏è getImageUrl Debugging');
  console.log('Input:', { 
    imagePath, 
    type: typeof imagePath, 
    options 
  });

  try {
    if (!imagePath) {
      console.warn('‚ùå Empty image path, returning default');
      console.groupEnd();
      return '/default-post-placeholder.png';
    }
  
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Google Drive URL
    if (imagePath.includes('drive.google.com')) {
      console.log('üîç Detected Google Drive URL');
      try {
        const url = new URL(imagePath);
        console.log('URL Object:', {
          href: url.href,
          origin: url.origin,
          pathname: url.pathname,
          search: url.search
        });

        const fileId = 
          url.searchParams.get('id') || 
          url.pathname.split('/').pop() || 
          imagePath.match(/\/file\/d\/([^/]+)/)?.[1];
        
        console.log('Google Drive URL parsing:', { 
          url: imagePath, 
          extractedId: fileId 
        });
        
        if (fileId) {
          const proxyUrl = `${API_URL}/api/proxy-drive/${fileId}`;
          console.log('‚úÖ Constructed proxy URL:', proxyUrl);
          console.groupEnd();
          return proxyUrl;
        } else {
          console.warn('‚ùå Could not extract file ID from Google Drive URL');
        }
      } catch (e) {
        console.error('‚ùå Error parsing Google Drive URL:', {
          url: imagePath,
          error: e.message,
          stack: e.stack
        });
      }
    }
  
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imagePath.startsWith('http')) {
      console.log('üåê Returning full HTTP URL:', imagePath);
      console.groupEnd();
      return imagePath;
    }
  
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    const finalUrl = `${API_URL}/uploads/${imagePath}`;
    console.log('üìÅ Constructed local URL:', finalUrl);
    console.groupEnd();
    return finalUrl;
  } catch (globalError) {
    console.error('üö® Unexpected error in getImageUrl:', {
      error: globalError.message,
      stack: globalError.stack
    });
    console.groupEnd();
    return '/default-post-placeholder.png';
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
 * @param {string} avatarPath - –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
 * @returns {string} - –ø–æ–ª–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞
 */
export const getAvatarUrl = (avatarPath) => {
  // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –ø—É—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
  if (!avatarPath) return '/default-avatar.png';
  
  // Google Drive URL
  if (avatarPath.includes('drive.google.com')) {
    return `${API_URL}/api/proxy-drive/${avatarPath.split('id=')[1]}`;
  }
  
  // Cloudinary –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
  if (avatarPath.startsWith('krealgram/')) {
    return `https://res.cloudinary.com/dibcwdwsd/image/upload/${avatarPath}`;
  }
  
  // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (avatarPath.startsWith('http')) {
    return avatarPath;
  }
  
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
  return `${API_URL}/uploads/${avatarPath}`;
};

export const getVideoUrl = (videoPath, options = {}) => {
  if (!videoPath) return null;

  // –ï—Å–ª–∏ —ç—Ç–æ Google Drive URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏
  if (videoPath.includes('drive.google.com')) {
    try {
      const url = new URL(videoPath);
      const fileId = url.searchParams.get('id');
      if (fileId) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º https –¥–ª—è API_URL
        const secureApiUrl = API_URL.replace(/^http:/, 'https');
        return `${secureApiUrl}/api/proxy-drive/${fileId}`;
      }
    } catch (e) {
      console.error("Invalid Google Drive URL", videoPath);
      return videoPath; // fallback to original path
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (videoPath.startsWith('http://') || videoPath.startsWith('https://')) {
    return videoPath;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ base64 –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (videoPath.startsWith('data:')) {
    return videoPath;
  }
  
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å krealgram/, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—É—Ç—å –∫ Cloudinary
  if (videoPath.startsWith('krealgram/')) {
    let cloudinaryUrl = `https://res.cloudinary.com/dibcwdwsd/video/upload/`;
    return cloudinaryUrl + videoPath;
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
  return `${API_URL}/uploads/${videoPath}`;
}; 

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≤–∏–¥–µ–æ
export const generateVideoPreviewUrl = (videoPath) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Drive URL
  let googleDriveUrl = `https://drive.google.com/uc?id=`;
  return googleDriveUrl + videoPath;
};

export const isValidMediaUrl = (url) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
  return url && (
    url.startsWith('http') || 
    url.startsWith('/') || 
    url.includes('drive.google.com')
  );
}; 