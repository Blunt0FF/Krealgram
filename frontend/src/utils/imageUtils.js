import { processMediaUrl } from './urlUtils';
import axios from 'axios';
import { API_URL } from '../config';
import { getAvatarUrl as resolveAvatarUrl } from './mediaUrlResolver';

const isImageFile = (file) => {
  return file && file.type.startsWith('image/');
};

export const compressImage = async (file, maxSizeKB = 500, maxWidth = 1920) => {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  return file;
};

export const getFileSizeKB = (dataUrl) => {
  return Math.round(dataUrl.length / 1024);
}; 

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è
export const compressPostImage = (file) => {
  return Promise.resolve(file);
};

export const compressAvatar = async (file) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (!isImageFile(file)) {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.');
    }

    console.log('üîß Starting avatar compression for:', file.name, 'Size:', file.size);

    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3.4MB
        const maxWidth = img.width;
        const maxHeight = img.height;
        let { width, height } = img;

        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }

        canvas.width = width;
        canvas.height = height;

        console.log('üîß Avatar canvas dimensions:', width, 'x', height);

        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 65% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3-3.4MB
        canvas.toBlob((blob) => {
          if (blob) {
            const compressedFile = new File([blob], file.name, {
              type: 'image/jpeg',
              lastModified: Date.now()
            });
            console.log('üîß Avatar compression result:', {
              originalSize: file.size,
              compressedSize: compressedFile.size,
              compressionRatio: (compressedFile.size / file.size * 100).toFixed(1) + '%',
              targetAchieved: compressedFile.size <= 3.4 * 1024 * 1024 ? '‚úÖ' : '‚ùå',
              sizeMB: (compressedFile.size / (1024 * 1024)).toFixed(2) + ' MB'
            });
            resolve(compressedFile);
          } else {
            reject(new Error('Failed to compress avatar'));
          }
        }, 'image/jpeg', 0.65); // –ö–∞—á–µ—Å—Ç–≤–æ 65% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3-3.4MB
      };
      
      img.onerror = () => reject(new Error('Failed to load avatar image'));
      img.src = URL.createObjectURL(file);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return file; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
};

export const uploadAvatar = async (file) => {
  try {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω base64, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ File
    if (typeof file === 'string') {
      const response = await fetch(file);
      const blob = await response.blob();
      const mimeType = response.headers.get('content-type') || 'image/jpeg';
      file = new File([blob], `avatar.${mimeType.split('/')[1]}`, { type: mimeType });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (!isImageFile(file)) {
      throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.');
    }

    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–∫–∞–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤)
    const compressedFile = await compressAvatar(file);

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const formData = new FormData();
    formData.append('avatar', compressedFile);

    const token = localStorage.getItem('token');
    const response = await axios.put(
      `${API_URL}/api/users/profile`,
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        }
      }
    );

    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    throw error;
  }
};

// –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import { resolveMediaUrl } from './mediaUrlResolver';
export const getImageUrl = resolveMediaUrl;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è thumbnail –≤–µ—Ä—Å–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
export const getAvatarThumbnailUrl = (avatarPath) => {
  if (!avatarPath) {
    return '/default-avatar.png';
  }

  // –ï—Å–ª–∏ —ç—Ç–æ Google Drive URL, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å thumbnail
  if (avatarPath.includes('drive.google.com')) {
    try {
      const fileId = avatarPath.match(/\/uc\?id=([^&]+)/)?.[1] || 
                     avatarPath.match(/\/d\/([^/]+)/)?.[1] || 
                     avatarPath.split('id=')[1];
      
      if (fileId) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è thumbnail
        const thumbnailUrl = `${API_URL}/api/proxy-drive/${fileId}`;
        console.log(`[AVATAR_THUMBNAIL] –î–ª—è –∞–≤–∞—Ç–∞—Ä–∞ ${fileId} –∏—Å–ø–æ–ª—å–∑—É–µ–º thumbnail: ${thumbnailUrl}`);
        return thumbnailUrl;
      }
    } catch (error) {
      console.error('[AVATAR_THUMBNAIL] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Drive URL:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      return resolveAvatarUrl(avatarPath);
    }
  }

  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö URL –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  console.log(`[AVATAR_THUMBNAIL] –î–ª—è –∞–≤–∞—Ç–∞—Ä–∞ ${avatarPath} –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª`);
  return resolveAvatarUrl(avatarPath);
};

// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const getAvatarUrl = (avatarPath) => {
  return resolveAvatarUrl(avatarPath);
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export const getVideoUrl = (videoPath, options = {}) => {
  if (!videoPath) return null;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ mediaUrlResolver
  return processMediaUrl(videoPath, 'video');
};
