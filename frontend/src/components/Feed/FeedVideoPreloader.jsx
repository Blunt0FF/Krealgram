import React, { useEffect, useRef } from 'react';
import { getVideoUrl } from '../../utils/mediaUrlResolver';

const FeedVideoPreloader = ({ posts, currentIndex = 0 }) => {
  const preloadedVideos = useRef(new Set());
  const videoElements = useRef(new Map());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Safari
  const isSafari = () => {
    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
  };

  useEffect(() => {
    if (!posts || posts.length === 0) return;

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    const videosToPreload = [];
    const startIndex = Math.max(0, currentIndex - 2); // –£–º–µ–Ω—å—à–∞–µ–º —Å 3 –¥–æ 2 –ø–æ—Å—Ç–æ–≤ –Ω–∞–∑–∞–¥
    const endIndex = Math.min(posts.length, currentIndex + 4); // –£–º–µ–Ω—å—à–∞–µ–º —Å 7 –¥–æ 4 –ø–æ—Å—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥
    
    console.log(`[VIDEO_PRELOADER] –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: ${startIndex} - ${endIndex} (–≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${posts.length})`);
    
    for (let i = startIndex; i < endIndex; i++) {
      const post = posts[i];
      if (post && (post.imageUrl || post.image) && !preloadedVideos.current.has(post._id)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
        const isVideo = 
          post.mediaType === 'video' ||
          (post.imageUrl && (post.imageUrl.includes('.mp4') || post.imageUrl.includes('video/'))) ||
          (post.image && (post.image.includes('.mp4') || post.image.includes('video/'))) ||
          post.videoUrl ||
          post.youtubeData;
        
        if (isVideo) {
          videosToPreload.push({
            id: post._id,
            url: post.imageUrl || post.image,
            index: i
          });
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
    videosToPreload.sort((a, b) => {
      const aDistance = Math.abs(a.index - currentIndex);
      const bDistance = Math.abs(b.index - currentIndex);
      return aDistance - bDistance;
    });

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    console.log(`[VIDEO_PRELOADER] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É ${videosToPreload.length} –≤–∏–¥–µ–æ`);
    videosToPreload.forEach(({ id, url, index }) => {
      try {
        const resolvedUrl = getVideoUrl(url);
        console.log(`[VIDEO_PRELOADER] –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ ${id} (–∏–Ω–¥–µ–∫—Å: ${index})`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        const video = document.createElement('video');
        video.crossOrigin = 'anonymous';
        // –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ—Å—Ç–æ–≤
        video.preload = index <= currentIndex + 1 ? 'metadata' : 'none';
        video.muted = true;
        video.playsInline = true;
        
        const handleLoadedMetadata = () => {
          if (!preloadedVideos.current.has(id)) {
            preloadedVideos.current.add(id);
            console.log(`[VIDEO_PRELOADER] ‚úÖ –í–∏–¥–µ–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${id}`);
          }
        };

        const handleError = (e) => {
          // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
          // console.error(`Video preload error for ${id}:`, e);
        };

        video.addEventListener('loadedmetadata', handleLoadedMetadata, { once: true });
        video.addEventListener('error', handleError);
        video.addEventListener('canplay', handleLoadedMetadata, { once: true });

        video.src = resolvedUrl;
        videoElements.current.set(id, video);

        // –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          const video = videoElements.current.get(id);
          if (video) {
            video.removeEventListener('loadedmetadata', handleLoadedMetadata);
            video.removeEventListener('error', handleError);
            video.removeEventListener('canplay', handleLoadedMetadata);
            video.src = '';
            video.load();
            videoElements.current.delete(id);
          }
        }, 30000);
      } catch (error) {
        console.error(`Error setting up video preload for ${id}:`, error);
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    const currentRange = new Set();
    for (let i = startIndex; i < endIndex; i++) {
      if (posts[i]) {
        currentRange.add(posts[i]._id);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    videoElements.current.forEach((video, id) => {
      if (!currentRange.has(id)) {
        console.log(`[VIDEO_PRELOADER] üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: ${id}`);
        video.src = '';
        video.load();
        videoElements.current.delete(id);
        preloadedVideos.current.delete(id);
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ video —ç–ª–µ–º–µ–Ω—Ç—ã
      videoElements.current.forEach((video, id) => {
        video.src = '';
        video.load();
      });
      videoElements.current.clear();
    };
  }, [posts, currentIndex]);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ
};

export default FeedVideoPreloader; 