import React, { useEffect, useRef } from 'react';
import { getVideoUrl } from '../../utils/mediaUrlResolver';
import { getOriginalFileName } from '../../utils/fileMetadata';
import videoCache from '../../utils/videoCache';

const FeedVideoPreloader = ({ posts, currentIndex = 0 }) => {
  const preloadedVideos = useRef(new Set());
  const videoElements = useRef(new Map());
  const lastProcessedIndex = useRef(-1);
  const processingTimeout = useRef(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Safari
  const isSafari = () => {
    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
  };

  useEffect(() => {
    if (!posts || posts.length === 0) return;

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    const maxConcurrentLoads = 2; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    let currentLoads = 0;
    
    const loadVideo = async ({ id, url, index }) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
      if (videoElements.current.has(id)) {
        return;
      }
      
      // –î–ª—è –ø–µ—Ä–≤—ã—Ö 10 –ø–æ—Å—Ç–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
      if (index >= 10 && currentLoads >= maxConcurrentLoads) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      currentLoads++;
      
      try {
        const resolvedUrl = getVideoUrl(url);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        const originalFileName = await getOriginalFileName(url);
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        const video = document.createElement('video');
        video.crossOrigin = 'anonymous';
        // –î–ª—è –ø–µ—Ä–≤—ã—Ö 10 –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
        video.preload = index < 10 ? 'metadata' : (index <= currentIndex + 3 ? 'metadata' : 'none');
        video.muted = true;
        video.playsInline = true;
        video.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        
        const handleLoadedMetadata = () => {
          if (!preloadedVideos.current.has(id)) {
            preloadedVideos.current.add(id);
            const prefix = index < 10 ? 'üî•' : 'üé¨';
            console.log(`${prefix} Video preloaded: ${originalFileName} (post ${index + 1})`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Safari
            if (isSafari()) {
              console.log(`ü¶Å Safari: Video metadata loaded for ${originalFileName}`);
            }
          }
        };

        const handleError = (e) => {
          // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
        };

        video.addEventListener('loadedmetadata', handleLoadedMetadata, { once: true });
        video.addEventListener('error', handleError);
        video.addEventListener('canplay', handleLoadedMetadata, { once: true });
        video.addEventListener('loadstart', () => {
          // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Å–ø–∞–º
          // console.log(`üöÄ Starting to load video: ${originalFileName}`);
        });

        video.src = resolvedUrl;
        videoElements.current.set(id, video);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫—ç—à –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        videoCache.addPreloadedVideo(resolvedUrl, video);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        setTimeout(() => {
          if (video.readyState >= 1) {
            const prefix = index < 10 ? 'üî•' : '‚úÖ';
            console.log(`${prefix} Video actually loaded: ${originalFileName} (post ${index + 1}, readyState: ${video.readyState})`);
          } else {
            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è readyState: 0, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
            // console.log(`‚ö†Ô∏è Video loading status: ${originalFileName} (readyState: ${video.readyState})`);
          }
        }, index < 10 ? 2000 : 3000); // –î–ª—è –ø–µ—Ä–≤—ã—Ö 10 –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä–µ–µ

        // –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          const video = videoElements.current.get(id);
          if (video) {
            video.removeEventListener('loadedmetadata', handleLoadedMetadata);
            video.removeEventListener('error', handleError);
            video.removeEventListener('canplay', handleLoadedMetadata);
            video.src = '';
            video.load();
            videoElements.current.delete(id);
          }
        }, 30000);
      } catch (error) {
        // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
      } finally {
        currentLoads--;
      }
    };

    // –î–ª—è –ø–µ—Ä–≤—ã—Ö 10 –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É, –±–µ–∑ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
    if (currentIndex < 10) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤ —Å—Ä–∞–∑—É
      const initialVideos = [];
      const endIndex = Math.min(10, posts.length);
      
      for (let i = 0; i < endIndex; i++) {
        const post = posts[i];
        if (post && (post.imageUrl || post.image) && !preloadedVideos.current.has(post._id)) {
          const isVideo = 
            post.mediaType === 'video' ||
            (post.imageUrl && (post.imageUrl.includes('.mp4') || post.imageUrl.includes('video/'))) ||
            (post.image && (post.image.includes('.mp4') || post.image.includes('video/'))) ||
            post.videoUrl ||
            post.youtubeData;
          
          if (isVideo) {
            initialVideos.push({
              id: post._id,
              url: post.imageUrl || post.image,
              index: i
            });
          }
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–∏–¥–µ–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      console.log(`üöÄ Starting to preload ${initialVideos.length} videos from first 10 posts`);
      initialVideos.forEach(loadVideo);
      return;
    }

    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ—Å—Ç–æ–≤
    if (processingTimeout.current) {
      clearTimeout(processingTimeout.current);
    }

    processingTimeout.current = setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å
      if (lastProcessedIndex.current === currentIndex) {
        return;
      }
      
      lastProcessedIndex.current = currentIndex;

      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
      const videosToPreload = [];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ - —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã
      const startIndex = Math.max(0, currentIndex - 2); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 –ø–æ—Å—Ç–æ–≤ –Ω–∞–∑–∞–¥
      const endIndex = Math.min(posts.length, currentIndex + 8); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ 8 –ø–æ—Å—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥
      
      for (let i = startIndex; i < endIndex; i++) {
        const post = posts[i];
        if (post && (post.imageUrl || post.image) && !preloadedVideos.current.has(post._id)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
          const isVideo = 
            post.mediaType === 'video' ||
            (post.imageUrl && (post.imageUrl.includes('.mp4') || post.imageUrl.includes('video/'))) ||
            (post.image && (post.image.includes('.mp4') || post.image.includes('video/'))) ||
            post.videoUrl ||
            post.youtubeData;
          
          if (isVideo) {
            videosToPreload.push({
              id: post._id,
              url: post.imageUrl || post.image,
              index: i
            });
          }
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
      videosToPreload.sort((a, b) => {
        const aDistance = Math.abs(a.index - currentIndex);
        const bDistance = Math.abs(b.index - currentIndex);
        return aDistance - bDistance;
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ
      videosToPreload.forEach(loadVideo);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
      const currentRange = new Set();
      for (let i = startIndex; i < endIndex; i++) {
        if (posts[i]) {
          currentRange.add(posts[i]._id);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      videoElements.current.forEach((video, id) => {
        if (!currentRange.has(id)) {
          video.src = '';
          video.load();
          videoElements.current.delete(id);
          preloadedVideos.current.delete(id);
        }
      });

    }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (processingTimeout.current) {
        clearTimeout(processingTimeout.current);
      }
      // –û—á–∏—â–∞–µ–º –≤—Å–µ video —ç–ª–µ–º–µ–Ω—Ç—ã
      videoElements.current.forEach((video, id) => {
        video.src = '';
        video.load();
      });
      videoElements.current.clear();
    };
  }, [posts, currentIndex]);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ
};

export default FeedVideoPreloader; 