import React, { useState, useRef, useEffect } from 'react';
import { getVideoPreviewThumbnail, getStaticThumbnail } from '../../utils/videoUtils';
import { getVideoUrl, getImageUrl } from '../../utils/imageUtils';
import videoManager from '../../utils/videoManager';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const isMobile = () => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
         (navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ (–∫–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
const getPostThumbnail = (post) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
  const urls = [
    post.thumbnailUrl,
    post.imageUrl,
    post.image,
    post.youtubeData?.thumbnailUrl,
    post.preview,
    post.gifPreview,
    '/default-post-placeholder.png'
  ].filter(Boolean);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º getImageUrl –∫–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  return getImageUrl(urls[0]);
};

const VideoPreview = ({ post, onClick, onDoubleClick, className = '', style = {} }) => {
  const [imageError, setImageError] = useState(false);
  const [staticError, setStaticError] = useState(false);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [showVideo, setShowVideo] = useState(false);
  const [videoLoaded, setVideoLoaded] = useState(false);
  const videoRef = useRef(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  const thumbnailUrl = getPostThumbnail(post);
  const gifUrl = getVideoPreviewThumbnail(post);
  const staticUrl = getStaticThumbnail(post);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleImageError = () => {
    console.warn('GIF preview failed, switching to static thumbnail');
    setImageError(true);
  };

  const handleStaticError = () => {
    console.warn('Static thumbnail failed, showing placeholder');
    setStaticError(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–¥–µ–æ
  const handleVideoClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    // YouTube –∏ –≤–Ω–µ—à–Ω–∏–µ –≤–∏–¥–µ–æ - –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    if (post.videoUrl && (post.videoUrl.includes('youtube') || post.videoUrl.includes('youtu.be'))) {
      onClick && onClick();
      return;
    }
    
    // –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    handleVideoPlay();
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –≤–∏–¥–µ–æ
  const handleVideoPlay = () => {
    if (!showVideo) {
      setShowVideo(true);
      setTimeout(() => {
        if (videoRef.current) {
          videoRef.current.play().catch(err => {
            console.error('Video play error:', err);
            // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            setShowVideo(false);
            setIsVideoPlaying(false);
          });
          setIsVideoPlaying(true);
        }
      }, 100);
    } else if (videoRef.current) {
      if (isVideoPlaying) {
        videoRef.current.pause();
        setIsVideoPlaying(false);
      } else {
        videoRef.current.play().catch(err => {
          console.error('Video play error:', err);
          // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
          setShowVideo(false);
          setIsVideoPlaying(false);
        });
        setIsVideoPlaying(true);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∏–¥–µ–æ
  const handleVideoEnded = () => {
    setIsVideoPlaying(false);
    setShowVideo(false);
    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∫–ª–∏–∫–Ω—É—Ç—å —Å–Ω–æ–≤–∞
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const handleVideoLoaded = () => {
    setVideoLoaded(true);
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const videoSrc = getVideoUrl(post.imageUrl || post.image);
    const getFileName = (url) => {
      try {
        const urlObj = new URL(url);
        const pathname = urlObj.pathname;
        const fileName = pathname.split('/').pop();
        return fileName || 'unknown';
      } catch {
        const parts = url.split('/');
        return parts[parts.length - 1] || 'unknown';
      }
    };
    const fileName = getFileName(videoSrc);
    console.log(`üé¨ VideoPreview loaded: ${fileName}`);
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (videoRef.current) {
        videoRef.current.pause();
      }
    };
  }, []);

  // –ï—Å–ª–∏ –æ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
  if (imageError && staticError) {
    return (
      <div 
        className={`post-video-placeholder ${className}`}
        style={{ 
          width: '100%',
          height: 'auto',
          maxHeight: '600px',
          cursor: 'pointer',
          ...style
        }}
        onClick={onClick}
      >
        <img 
          src="/video-placeholder.svg" 
          alt="Video placeholder" 
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: '600px',
            objectFit: 'contain'
          }}
        />
      </div>
    );
  }

  return (
    <div 
      className={`post-video-placeholder ${className}`}
      style={{ 
        width: '100%',
        height: 'auto',
        maxHeight: '600px',
        cursor: showVideo ? 'default' : 'pointer',
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        ...style
      }}
      onClick={showVideo ? undefined : handleVideoClick}
      onDoubleClick={onDoubleClick}
    >
      {/* –í–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
      {showVideo && (post.imageUrl || post.image) && (
        <video
          ref={videoRef}
          src={getVideoUrl(post.imageUrl || post.image)}
          type="video/mp4"
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: '600px',
            objectFit: 'contain',
            display: 'block',
            pointerEvents: 'auto'
          }}
          controls
          playsInline
          webkit-playsinline="true"
          x5-playsinline="true"
          x5-video-player-type="h5"
          x5-video-player-fullscreen="true"
          x5-video-orientation="portrait"
          preload="auto" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
          muted={false} // –ó–≤—É–∫ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
          onPlay={() => {
            setIsVideoPlaying(true);
            videoManager.setCurrentVideo(videoRef.current);
          }}
          onPause={() => {
            setIsVideoPlaying(false);
            if (videoManager.getCurrentVideo() === videoRef.current) {
              videoManager.pauseCurrentVideo();
            }
          }}
          onEnded={handleVideoEnded}
          onLoadedData={handleVideoLoaded}
          onError={(e) => {
            console.error('Video error:', e.target.error);
            console.log('Failed video src:', e.target.src);
            // –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setShowVideo(false);
            setIsVideoPlaying(false);
          }}
          onClick={(e) => e.stopPropagation()}
        />
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ GIF –ø—Ä–µ–≤—å—é (–∫–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ) */}
      {!imageError && !showVideo && thumbnailUrl && (
        <img
          src={thumbnailUrl}
          alt="Video preview"
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: '600px',
            objectFit: 'contain',
            display: 'block'
          }}
          onError={handleImageError}
        />
      )}
      
      {/* Fallback —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–≤—å—é */}
      {(imageError || !thumbnailUrl) && !showVideo && (
        <img
          src={staticUrl}
          alt="Video static preview"
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: '600px',
            objectFit: 'contain',
            display: 'block'
          }}
          onError={handleStaticError}
        />
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
      {!showVideo && (
        <div 
          style={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            background: 'rgba(0,0,0,0.5)',
            borderRadius: '50%',
            width: '60px',
            height: '60px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'pointer',
            zIndex: 10
          }}
          onClick={handleVideoClick}
        >
          <svg width="32" height="32" fill="white" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
        </div>
      )}
    </div>
  );
};

export default VideoPreview; 