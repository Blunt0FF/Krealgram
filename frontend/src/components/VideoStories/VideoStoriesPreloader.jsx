import React, { useEffect, useRef } from 'react';
import { getVideoUrl } from '../../utils/mediaUrlResolver';
import { getOriginalFileName } from '../../utils/fileMetadata';

const VideoStoriesPreloader = ({ videos, currentIndex = 0 }) => {
  const preloadedVideos = useRef(new Set());
  const videoElements = useRef(new Map());

  useEffect(() => {
    if (!videos || videos.length === 0) return;

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º 2 —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
    const videosToPreload = [];
    const startIndex = currentIndex + 1;
    const endIndex = Math.min(videos.length, currentIndex + 3); // +3 –ø–æ—Ç–æ–º—É —á—Ç–æ currentIndex + 1, +2, +3
    
    for (let i = startIndex; i < endIndex; i++) {
      const video = videos[i];
      if (video && !preloadedVideos.current.has(video._id)) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤–∏–¥–µ–æ
        let videoUrl = null;
        
        if (video?.youtubeData?.videoId) {
          // –î–ª—è YouTube –≤–∏–¥–µ–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º thumbnail
          videoUrl = `https://img.youtube.com/vi/${video.youtubeData.videoId}/maxresdefault.jpg`;
        } else {
          // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
          videoUrl = getVideoUrl(video?.videoUrl || video?.image);
        }
        
        if (videoUrl) {
          videosToPreload.push({
            id: video._id,
            url: videoUrl,
            index: i,
            isYouTube: !!video?.youtubeData?.videoId
          });
        }
      }
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    const maxConcurrentLoads = 2; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    let currentLoads = 0;
    
    const loadVideo = async ({ id, url, index, isYouTube }) => {
      if (currentLoads >= maxConcurrentLoads) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
      currentLoads++;
      
      try {
        if (isYouTube) {
          // –î–ª—è YouTube –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º thumbnail
          const img = document.createElement('img');
          img.crossOrigin = 'anonymous';
          
          const handleLoad = () => {
            if (!preloadedVideos.current.has(id)) {
              preloadedVideos.current.add(id);
              console.log(`üì± Stories video preloaded: ${videos[index]?.youtubeData?.title || 'YouTube video'}`);
            }
          };

          const handleError = () => {
            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
          };

          img.addEventListener('load', handleLoad, { once: true });
          img.addEventListener('error', handleError);
          img.src = url;
          videoElements.current.set(id, img);

          // –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            const img = videoElements.current.get(id);
            if (img) {
              img.removeEventListener('load', handleLoad);
              img.removeEventListener('error', handleError);
              img.src = '';
              videoElements.current.delete(id);
            }
          }, 30000);
        } else {
          // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
          const video = document.createElement('video');
          video.crossOrigin = 'anonymous';
          video.preload = 'metadata';
          video.muted = true;
          video.playsInline = true;
          
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
          const originalFileName = await getOriginalFileName(url);
          
          const handleLoadedMetadata = () => {
            if (!preloadedVideos.current.has(id)) {
              preloadedVideos.current.add(id);
              console.log(`üì± Stories video preloaded: ${originalFileName}`);
              
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Safari
              const isSafari = navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
              if (isSafari) {
                console.log(`ü¶Å Safari: Stories video metadata loaded for ${originalFileName}`);
              }
            }
          };

          const handleError = () => {
            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
          };

          video.addEventListener('loadedmetadata', handleLoadedMetadata, { once: true });
          video.addEventListener('error', handleError);
          video.addEventListener('canplay', handleLoadedMetadata, { once: true });
                  video.addEventListener('loadstart', () => {
          // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Å–ø–∞–º
          // console.log(`üöÄ Starting to load stories video: ${originalFileName}`);
        });

          video.src = url;
          videoElements.current.set(id, video);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
          setTimeout(() => {
            if (video.readyState >= 1) {
              console.log(`‚úÖ Stories video actually loaded: ${originalFileName} (readyState: ${video.readyState})`);
            } else {
              // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è readyState: 0, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
              // console.log(`‚ö†Ô∏è Stories video loading status: ${originalFileName} (readyState: ${video.readyState})`);
            }
          }, 3000);

          // –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            const video = videoElements.current.get(id);
            if (video) {
              video.removeEventListener('loadedmetadata', handleLoadedMetadata);
              video.removeEventListener('error', handleError);
              video.removeEventListener('canplay', handleLoadedMetadata);
              video.src = '';
              video.load();
              videoElements.current.delete(id);
            }
          }, 30000);
        }
      } catch (error) {
        // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
      } finally {
        currentLoads--;
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ
    videosToPreload.forEach(loadVideo);

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    const currentRange = new Set();
    for (let i = startIndex; i < endIndex; i++) {
      if (videos[i]) {
        currentRange.add(videos[i]._id);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    videoElements.current.forEach((element, id) => {
      if (!currentRange.has(id)) {
        if (element.tagName === 'VIDEO') {
          element.src = '';
          element.load();
        } else {
          element.src = '';
        }
        videoElements.current.delete(id);
        preloadedVideos.current.delete(id);
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      videoElements.current.forEach((element, id) => {
        if (element.tagName === 'VIDEO') {
          element.src = '';
          element.load();
        } else {
          element.src = '';
        }
      });
      videoElements.current.clear();
    };
  }, [videos, currentIndex]);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ
};

export default VideoStoriesPreloader; 