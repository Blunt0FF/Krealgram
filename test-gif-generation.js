const fs = require('fs');
const path = require('path');
const ffmpeg = require('fluent-ffmpeg');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ GIF-–ø—Ä–µ–≤—å—é
async function testGifGeneration() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ GIF-–ø—Ä–µ–≤—å—é...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª (1KB –±—É—Ñ–µ—Ä)
    const testVideoPath = path.join(__dirname, 'test-video.mp4');
    const testBuffer = Buffer.alloc(1024, 'A');
    fs.writeFileSync(testVideoPath, testBuffer);
    
    console.log('üìπ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª:', testVideoPath);
    
    // –°–æ–∑–¥–∞–µ–º GIF-–ø—Ä–µ–≤—å—é
    const gifPath = path.join(__dirname, `test-gif-${Date.now()}.gif`);
    
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º GIF-–ø—Ä–µ–≤—å—é...');
    
    return new Promise((resolve, reject) => {
      ffmpeg(testVideoPath)
        .outputOptions([
          '-vf', 'fps=8,scale=320:-1',
          '-t', '3',
          '-compression_level', '9',
          '-q:v', '30'
        ])
        .toFormat('gif')
        .on('start', (commandLine) => {
          console.log('üöÄ FFmpeg –∫–æ–º–∞–Ω–¥–∞:', commandLine);
        })
        .on('progress', (progress) => {
          console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:', progress);
        })
        .on('end', async () => {
          try {
            console.log('‚úÖ GIF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            const stats = fs.statSync(gifPath);
            const sizeMB = stats.size / (1024 * 1024);
            console.log(`üìè –†–∞–∑–º–µ—Ä GIF: ${sizeMB.toFixed(2)} MB`);
            
            if (sizeMB > 5) {
              console.log('‚ö†Ô∏è GIF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5MB), –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω');
              fs.unlinkSync(gifPath);
            } else {
              console.log('‚úÖ GIF –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞');
            }
            
            // –û—á–∏—Å—Ç–∫–∞
            fs.unlinkSync(testVideoPath);
            if (fs.existsSync(gifPath)) {
              fs.unlinkSync(gifPath);
            }
            
            resolve();
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è GIF:', error);
            reject(error);
          }
        })
        .on('error', (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GIF:', err);
          reject(err);
        })
        .save(gifPath);
    });
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testGifGeneration(); 